import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as s,o as g}from"./app-CGk8ZzeL.js";const r="/screenshot/backend/image-20251013214454674.png",i="/screenshot/backend/image-20251013121751180.png",e="/screenshot/backend/image-20251013130002349.png",a="/screenshot/backend/image-20251013124408713.png",l="/screenshot/backend/image-20251013121843576.png",c="/screenshot/backend/image-20251013112742698.png",p="/screenshot/backend/image-20251013113529447.png",d="/screenshot/backend/image-20251013121120752.png",h="/screenshot/backend/image-20251013121537369.png",m="/screenshot/backend/image-20251013222829174.png",u="/screenshot/backend/image-20251013221831854.png",b="/screenshot/backend/image-20251013222040076.png",f="/screenshot/backend/image-20251013222333237.png",P="/screenshot/backend/image-20251014122953171.png",x="/screenshot/backend/image-20251014123604469.png",T="/screenshot/backend/image-20251014123732540.png",C="/screenshot/backend/image-20251014123747948.png",S="/screenshot/backend/image-20251013203754926.png",k="/screenshot/backend/image-20251013200644701.png",_="/screenshot/backend/image-20251013201120277.png",z="/screenshot/backend/image-20251013201551042.png",I="/screenshot/backend/image-20251013220614655.png",y="/screenshot/backend/image-20251014171229965.png",H="/screenshot/backend/image-20251012193353851.png",D="/screenshot/backend/image-20251012195424252.png",N={};function A(v,n){return g(),o("div",null,[...n[0]||(n[0]=[s('<h2 id="计网常见知识" tabindex="-1"><a class="header-anchor" href="#计网常见知识"><span>计网常见知识</span></a></h2><h3 id="常见含义" tabindex="-1"><a class="header-anchor" href="#常见含义"><span>常见含义</span></a></h3><p><strong>ISP</strong>：互联网服务提供商，如中国电信、中国联通等</p><p><strong>MAC</strong>： <strong>网络接口卡（网卡）</strong> 在制造时固化的一个<strong>全球唯一标识符</strong></p><h3 id="tcp-ip模型" tabindex="-1"><a class="header-anchor" href="#tcp-ip模型"><span>TCP/IP模型</span></a></h3><p><strong>OSI和TCP/IP</strong></p><figure><img src="'+r+'" alt="image-20251013214454674" tabindex="0" loading="lazy"><figcaption>image-20251013214454674</figcaption></figure><p>如上图所示：</p><ul><li>我们使用的<code>HTTPS</code>、<code>FTP</code>、<code>DHCP</code>、以及<code>HTTP</code>都属于<strong>应用层</strong></li><li><code>TCP</code>、<code>UDP</code>都属于<strong>传输层</strong></li><li><code>IP</code>则属于<strong>网络层</strong></li></ul><h3 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>Socket</span></a></h3><p><strong>套接字</strong>，就是ip地址+端口号</p><h3 id="tcp" tabindex="-1"><a class="header-anchor" href="#tcp"><span>TCP</span></a></h3><p><strong>核心：三握四挥</strong></p><p><strong>TCP首部会用掉20个字节</strong></p><figure><img src="'+i+'" alt="image-20251013121751180" tabindex="0" loading="lazy"><figcaption>image-20251013121751180</figcaption></figure><p><strong>TCP报文里有SYN、ACK和FIN标识</strong></p><ul><li>设置为1就是开启这些标识</li><li>设置为0就是关闭这些标识</li></ul><h4 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h4><p><strong>流程</strong></p><ul><li>客户端发送SYN报文，并设置好序号</li><li>服务端发送SYN+ACK报文，设置序号，将确认号的值设置为客户端SYN报文的序号+1</li><li>客户端发送ACK报文，序号用服务端报文的确认号，确认号用服务端报文的序号+1</li></ul><figure><img src="'+e+'" alt="image-20251013130002349" tabindex="0" loading="lazy"><figcaption>image-20251013130002349</figcaption></figure><h4 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h4><p><strong>流程</strong></p><ul><li>主动断开方（可以是客户端，也可以是服务端）发送一个FIN和ACK报文，并设置好<strong>序号和确认号</strong></li><li>被动断开方发送一个ACK报文，报文的序号为断开请求的确认号，<strong>报文的确认号为断开请求的序号+1</strong></li><li>被动断开方还可以进行数据的发送，剩余数据发送完后，被动断开方会向主动断开方发送一个FIN+ACK结束响应报文</li><li>主动断开方在收到FIN+ACK断开响应报文后，还需要进行最后的确认，向被动断开方发送一个ACK确认报文，<strong>序号为被动断开方的确认号，确认号为被动断开方的序号+1</strong></li></ul><figure><img src="'+a+'" alt="image-20251013124408713" tabindex="0" loading="lazy"><figcaption>image-20251013124408713</figcaption></figure><p><strong>为什么要进行四次挥手？</strong></p><p>因为服务端可能还有数据需要发送</p><h4 id="tcp流量控制" tabindex="-1"><a class="header-anchor" href="#tcp流量控制"><span>TCP流量控制</span></a></h4><p><strong>目的</strong>：主要是为了解决<strong>发送方发送数据过快</strong>导致接收方缓冲区溢出的问题</p><p><strong>核心思想</strong>：接收方通过告知发送方自己还有多少<strong>剩余的缓冲区空间</strong>来主动控制<strong>发送方的发送速率</strong></p><p><strong>核心机制</strong>：滑动窗口</p><h5 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程"><span>工作流程</span></a></h5><ol><li><strong>连接建立时</strong><ul><li>双方都会维护一个接收缓冲区</li><li>TCP首部中的 <code>Window</code> 字段表示当前可接收的窗口大小（<code>rwnd</code>）</li></ul></li><li><strong>数据传输中</strong><ul><li>发送方发送数据后会等待ACK</li><li>接收方每次ACK时，会带上<strong>当前的接收窗口大小</strong></li><li>发送方根据ACK中的 <code>rwnd</code> 调整自己的发送速率</li></ul></li><li><strong>窗口滑动</strong><ul><li>当接收方应用程序从接收缓存中取走部分数据时，空出来的空间就意味着窗口可以“滑动”</li><li>接收方在下一次ACK中通知发送方新的窗口大小</li></ul></li></ol><h3 id="udp" tabindex="-1"><a class="header-anchor" href="#udp"><span>UDP</span></a></h3><p><strong>无连接、不可靠</strong>的传输协议，常用在<strong>端口寻址、实施在线游戏、实时音视频传输等</strong></p><p><strong>特点</strong></p><ul><li><strong>无连接</strong>：通信前不需要建立连接，直接发送数据包即可</li><li><strong>不可靠交付</strong>：不提供确认、重传等机制</li><li><strong>无拥塞控制</strong>：不管网络状况多差，UDP都会以恒定的速率发送数据</li><li><strong>支持广播</strong></li></ul><p><strong>UDP首部只用掉8个字节</strong></p><figure><img src="'+l+'" alt="image-20251013121843576" tabindex="0" loading="lazy"><figcaption>image-20251013121843576</figcaption></figure><h3 id="ipv4和子网掩码" tabindex="-1"><a class="header-anchor" href="#ipv4和子网掩码"><span>IPV4和子网掩码</span></a></h3><h4 id="ipv4" tabindex="-1"><a class="header-anchor" href="#ipv4"><span><strong>IPV4</strong></span></a></h4><p><code>ipv4</code>是由<strong>4组8位二进制组成的</strong>，组之间用<code>.</code>隔开</p><p><code>ip</code>地址 = 网络号 + 主机号</p><ul><li><strong>网络号</strong>：同一个物理网络的所有设备，<strong>网络号是相同的</strong><ul><li><strong>路由寻址</strong>：路由器只关心<strong>目标IP地址的网络号</strong>，从而实现数据包的转发</li></ul></li><li><strong>主机号</strong>：IP地址中在特定网络内用于<strong>标识唯一设备</strong>的一部分 <ul><li><strong>最终交付</strong>：数据包<strong>到达目标网络</strong>后，路由器会查看<strong>目标IP的主机号</strong>，从而将数据包准确地发送给正确的设备</li></ul></li></ul><p><strong>ip地址类型</strong></p><ul><li>A类：网络数为<strong>128</strong>，主机数为<strong>16777216</strong></li><li>B类：网络数为<strong>16384</strong>，主机数为<strong>65536</strong></li><li>C类：网络数为<strong>2097152</strong>，主机数为<strong>256</strong></li></ul><figure><img src="'+c+'" alt="image-20251013112742698" tabindex="0" loading="lazy"><figcaption>image-20251013112742698</figcaption></figure><p><strong>注意</strong></p><ul><li><strong>网络地址</strong>的<strong>主机位</strong>全部为0，会占用1个ip，是整个网络的唯一标识</li><li><strong>广播地址</strong>的<strong>主机位</strong>全部位1，会占用1个ip，向网络中所有设备发送广播</li><li>因此，C类网络只能分配<code>256-2=254</code>个ip地址</li></ul><h4 id="子网掩码" tabindex="-1"><a class="header-anchor" href="#子网掩码"><span><strong>子网掩码</strong></span></a></h4><p><strong>一个32位二进制数，为了划分网路号和主机号而产生的</strong></p><ul><li><strong>相同的网络号</strong>会用<strong>子网掩码的1</strong>进行锁定</li><li>主机号<strong>为0的二进制位</strong>也会用<strong>子网掩码的1</strong>来进行锁定</li></ul><p>也就是说，在子网掩码中</p><ul><li><strong>1对应的位是网络位</strong>：标识一个子网。同一个子网内的所有IP地址，其网络位必须完全相同</li><li><strong>0对应的位是主机位</strong>：标识子网内的具体设备。主机位在子网内可变，且必须唯一</li></ul><figure><img src="'+p+'" alt="image-20251013113529447" tabindex="0" loading="lazy"><figcaption>image-20251013113529447</figcaption></figure><h4 id="cidr表示方法" tabindex="-1"><a class="header-anchor" href="#cidr表示方法"><span><strong>CIDR表示方法</strong></span></a></h4><p>看子网掩码中有多少个1，在IP地址后加<code>/1的个数</code>即可</p><h3 id="ipv6" tabindex="-1"><a class="header-anchor" href="#ipv6"><span>IPV6</span></a></h3><p><code>ipv6</code>地址是由<strong>128位二进制数</strong>组成，通常以<strong>十六进制</strong>形式表示，分为<strong>8组</strong>，每组<strong>16位二进制数（4个十六进制数字）<strong>用</strong>冒号</strong>分隔</p><h4 id="地址压缩" tabindex="-1"><a class="header-anchor" href="#地址压缩"><span><strong>地址压缩</strong></span></a></h4><ul><li><strong>零压缩</strong>：连续的零组可以用双冒号（<code>::</code>）表示，但在一个地址中只能使用一次</li><li><strong>前导零压缩</strong>：每组中的前导零可以省略，例如0001可以表示为1</li></ul><h4 id="地址的组成部分" tabindex="-1"><a class="header-anchor" href="#地址的组成部分"><span><strong>地址的组成部分</strong></span></a></h4><p><strong>前缀</strong>：前缀用于标识网络部分，类似于IPv4中的网络地址，前缀长度通常以斜杠后跟数字的形式表示</p><p><strong>接口标识符</strong>：用于标识网络中的具体接口，通常为后64位</p><figure><img src="'+d+'" alt="image-20251013121120752" tabindex="0" loading="lazy"><figcaption>image-20251013121120752</figcaption></figure><h4 id="地址类型" tabindex="-1"><a class="header-anchor" href="#地址类型"><span>地址类型</span></a></h4><figure><img src="'+h+'" alt="image-20251013121537369" tabindex="0" loading="lazy"><figcaption>image-20251013121537369</figcaption></figure><h3 id="nat" tabindex="-1"><a class="header-anchor" href="#nat"><span>NAT</span></a></h3><p><strong>网络地址转换</strong></p><figure><img src="'+m+'" alt="image-20251013222829174" tabindex="0" loading="lazy"><figcaption>image-20251013222829174</figcaption></figure><p><strong>原理：</strong></p><ul><li>内网访问外网通过出口路由时，源地址会转换成特定公有地址，并且将两个ip映射关系加到NAT映射表上</li><li>在外网向内网通信时，目的地址还是特定公有地址，但是到达出口路由器后，查看NAT映射表，从而转换为私有地址</li></ul><p><strong>问题：</strong></p><ul><li><strong>破坏端到端通信</strong>：两个都在NAT后的设备难以直接建立P2P连接</li><li><strong>服务暴露困难</strong>：外部网络无法直接主动访问NAT后的内部服务</li></ul><h4 id="虚拟机网络" tabindex="-1"><a class="header-anchor" href="#虚拟机网络"><span>虚拟机网络</span></a></h4><p><strong>NAT</strong></p><p><strong>图解</strong></p><figure><img src="'+u+'" alt="image-20251013221831854" tabindex="0" loading="lazy"><figcaption>image-20251013221831854</figcaption></figure><ul><li>虚拟机之间无法互相访问</li><li>宿主机、局域网设备无法访问虚拟机</li><li>虚拟机可以通过宿主机访问互联网</li></ul><p><strong>NAT网络</strong></p><p><strong>图解</strong></p><figure><img src="'+b+'" alt="image-20251013222040076" tabindex="0" loading="lazy"><figcaption>image-20251013222040076</figcaption></figure><ul><li>在虚拟机前加了一台虚拟的交换机</li><li>加上了网关和DHCP服务</li></ul><p><strong>桥接</strong></p><p><strong>图解</strong></p><figure><img src="'+f+'" alt="image-20251013222333237" tabindex="0" loading="lazy"><figcaption>image-20251013222333237</figcaption></figure><ul><li>虚拟机和宿主机同级，在同一个网络里</li><li>宿主机和虚拟机在<strong>同一个DHCP服务</strong>获取私有IP地址，因此虚拟机会<strong>消耗</strong>宿主机所在局域网的IP地址</li></ul><h3 id="dhcp" tabindex="-1"><a class="header-anchor" href="#dhcp"><span>DHCP</span></a></h3><p><strong>动态主机配置协议</strong>，是处于<strong>应用层</strong>的协议</p><p><strong>作用</strong>：自动为网络中的电脑、手机等设备分配IP地址</p><h4 id="动态配置" tabindex="-1"><a class="header-anchor" href="#动态配置"><span>动态配置</span></a></h4><p>可以在路由器中配置IP池，增加私有IP的数量，从而增加联网设备的数量</p><h4 id="dhcp握手" tabindex="-1"><a class="header-anchor" href="#dhcp握手"><span>DHCP握手</span></a></h4><p><strong>流程</strong></p><ul><li>客户端发送**<code>DHCP Discover</code>** <ul><li><strong>传输层</strong>使用UDP进行数据传输，客户端使用68端口，服务端使用67端口</li><li><strong>网络层</strong>中，不知道源IP地址填写<code>0.0.0.0</code>，不知道目标IP地址填写<code>255.255.255.255</code>，这样交换机接受到之后就会进行<strong>广播</strong></li><li><strong>数据链路层</strong>与IP地址道理相同</li></ul></li></ul><figure><img src="'+P+'" alt="image-20251014122953171" tabindex="0" loading="lazy"><figcaption>image-20251014122953171</figcaption></figure><ul><li>DHCP服务器发送**<code>DHCP Offer</code>**，给客户端提供私有IP地址、子网掩码、网关、DNS <ul><li><strong>网络层</strong>中DHCP服务器会发送确定的源IP地址和目标IP地址供客户端选择</li><li><strong>数据链路层</strong>中的MAC地址也同理</li></ul></li></ul><figure><img src="'+x+'" alt="image-20251014123604469" tabindex="0" loading="lazy"><figcaption>image-20251014123604469</figcaption></figure><ul><li>客户端进行**<code>DHCP Request</code>**，广播所有DHCP服务器客户端选择了哪个IP</li></ul><figure><img src="'+T+'" alt="image-20251014123732540" tabindex="0" loading="lazy"><figcaption>image-20251014123732540</figcaption></figure><ul><li>服务端发送**<code>DHCP ACK</code>**，新设备可以开始上网</li></ul><figure><img src="'+C+'" alt="image-20251014123747948" tabindex="0" loading="lazy"><figcaption>image-20251014123747948</figcaption></figure><h3 id="vpn" tabindex="-1"><a class="header-anchor" href="#vpn"><span>VPN</span></a></h3><p><strong>VPN的三个职责</strong></p><ul><li>保密</li><li>认证</li><li>完整</li></ul><figure><img src="'+S+'" alt="image-20251013203754926" tabindex="0" loading="lazy"><figcaption>image-20251013203754926</figcaption></figure><p><strong>全隧道模式</strong></p><p><strong>半隧道模式</strong></p><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h3><p><strong>DNS默认使用UDP协议</strong></p><ul><li>不出现<strong>分片</strong>情况下，UDP协议最大有效载荷是<strong>512字节</strong>以内</li><li>根服务器地址需要塞进一个<strong>UDP包里</strong>，最多只能放下<strong>13组</strong>记录</li></ul><h4 id="域名结构树" tabindex="-1"><a class="header-anchor" href="#域名结构树"><span><strong>域名结构树</strong></span></a></h4><ul><li>顶层的根<code>.</code>是由一群服务器组成的，<strong>这群服务器只用了13个域名</strong></li></ul><figure><img src="'+k+'" alt="image-20251013200644701" tabindex="0" loading="lazy"><figcaption>image-20251013200644701</figcaption></figure><h4 id="域名服务器类型" tabindex="-1"><a class="header-anchor" href="#域名服务器类型"><span><strong>域名服务器类型</strong></span></a></h4><figure><img src="'+_+'" alt="image-20251013201120277" tabindex="0" loading="lazy"><figcaption>image-20251013201120277</figcaption></figure><h4 id="dns解析过程" tabindex="-1"><a class="header-anchor" href="#dns解析过程"><span><strong>DNS解析过程</strong></span></a></h4><ol><li><strong>浏览器缓存</strong>：首先在浏览器检查是否有该域名对应的IP</li><li><strong>操作系统缓存</strong>：如果没有，浏览器会调用操作系统（如通过 <code>gethostbyname</code>系统调用），检查本地的Hosts文件和操作系统DNS缓存</li><li><strong>本地DNS解析器</strong>：如果本地没有，请求会发送到配置的<strong>本地DNS服务器</strong></li><li><strong>根域名服务器</strong>：若本地DNS解析器没有缓存，会向<strong>根域名服务器</strong>发起查询，<strong>根域名服务器</strong>只会返回负责你输入的域名的TLD（如<code>.com</code>、<code>.cn</code>）的<strong>顶级域服务器地址</strong></li><li><strong>顶级域名服务器（TLD）</strong>：本地DNS服务器再向TLD服务器查询，得到<strong>权威域名服务器的</strong>地址</li><li><strong>权威域名服务器</strong>：最后，本地DNS服务器向权威域名服务器查询你输入的域名的IP</li><li><strong>返回并缓存</strong>：本地DNS服务器将IP地址返回给操作系统，并缓存该记录。操作系统再返回给浏览器，并缓存</li></ol><figure><img src="'+z+'" alt="image-20251013201551042" tabindex="0" loading="lazy"><figcaption>image-20251013201551042</figcaption></figure><h4 id="常见dns记录类型" tabindex="-1"><a class="header-anchor" href="#常见dns记录类型"><span>常见DNS记录类型</span></a></h4><ul><li><strong><code>A</code>记录</strong>：将域名指向一个<strong>IPv4</strong>地址</li><li><strong><code>AAAA</code>记录</strong>：将域名指向一个<strong>IPv6</strong>地址</li><li><strong><code>CNAME</code>记录</strong>： 域名别名，将一个域名指向另一个域名</li><li><strong><code>MX</code>记录</strong>： 邮件交换记录，指定负责接收邮件的服务器</li></ul><h3 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh"><span>SSH</span></a></h3><p>一种<strong>加密的通信方式</strong>，在SSH握手过程<strong>使用非对称加密获得对称密钥</strong></p><h4 id="连接流程" tabindex="-1"><a class="header-anchor" href="#连接流程"><span>连接流程</span></a></h4><ul><li>进行TCP连接</li><li>进行SSH握手</li><li>客户端和服务端协商<strong>SSH协议版本</strong></li><li>进行<strong>密钥交换初始化</strong>，协商应该使用什么<strong>算法</strong></li><li>客户端生成<strong>临时私钥</strong>和<strong>临时公钥</strong>，将<strong>临时公钥</strong>发送给服务端</li><li>服务端生成<strong>临时私钥</strong>和<strong>临时公钥</strong>，将<strong>客户端的临时公钥</strong>和自己的<strong>临时私钥</strong>和<strong>临时公钥</strong>生成<strong>共享安全密钥</strong></li><li>服务端将自己的<strong>临时公钥</strong>发送给客户端，客户端将<strong>服务端的临时公钥</strong>和自己的<strong>临时私钥</strong>和<strong>临时公钥</strong>生成<strong>共享安全密钥</strong></li><li>服务端生成一对<code>host</code>公钥和<code>host</code>私钥，生成<strong>交换哈希值</strong>，并使用<code>host</code>私钥对交换哈希值进行加密，生成交换哈希值的<strong>数字签名</strong>，将<strong>数字签名和<code>host</code>公钥</strong>发送给客户端</li><li>客户端拿到服务端的<code>host</code>公钥对<strong>数字签名</strong>进行解密，并生成自己的<strong>交换哈希值（客户端和服务端算出来的交换哈希值是一样的）</strong>，比较二者是否一样</li></ul><figure><img src="'+I+'" alt="image-20251013220614655" tabindex="0" loading="lazy"><figcaption>image-20251013220614655</figcaption></figure><h4 id="交换哈希值" tabindex="-1"><a class="header-anchor" href="#交换哈希值"><span>交换哈希值</span></a></h4><p><strong>构成：</strong></p><ul><li>客户端和服务端的<strong>版本号字符串</strong></li><li>客户端和服务端密钥交换初始化负载（<strong>算法名称的字符串</strong>）</li><li>服务端的<code>host</code>公钥</li><li>客户端临时公钥和服务端临时公钥</li><li>共享安全密钥</li></ul><h4 id="使用ssh证书" tabindex="-1"><a class="header-anchor" href="#使用ssh证书"><span>使用SSH证书</span></a></h4><p>在客户端使用<code>ssh-keygen</code>命令生成密钥对，<strong>私钥放在本地，使用<code>ssh-copy-id</code>将公钥发送给服务器</strong>，可以实现免密登录，<strong>提高登录安全性</strong></p><h3 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h3><p><strong>超文本传输协议</strong></p><ul><li><p><strong>无状态</strong>（Stateless）</p></li><li><p><strong>明文传输</strong>（HTTP1.1以前）</p></li><li><p><strong>可扩展</strong>（Header可以自定义）</p></li><li><p>灵活（支持文本、图片、视频等多种资源类型）</p></li><li><p>请求-响应模型</p></li><li><p>默认端口是<strong>80</strong></p></li></ul><p><strong>核心概括</strong></p><ul><li><strong>HTTP/1.1</strong>：持久连接、明文文本、队头阻塞</li><li><strong>HTTP/2</strong>：二进制分帧、多路复用、头部压缩</li><li><strong>HTTP/3</strong>：基于QUIC/UDP、解决TCP队头阻塞、集成TLS</li></ul><h4 id="http-1-1" tabindex="-1"><a class="header-anchor" href="#http-1-1"><span>HTTP/1.1</span></a></h4><p>默认是<strong>持久连接（Keep-Alive）</strong>，且是<strong>明文发送</strong></p><p><strong>核心</strong>：发送一次HTTP请求，得到响应后才能进行下一次HTTP请求</p><ul><li><p><strong>报文格式</strong>：使用<strong>纯文本协议</strong>，明文传输，（请求/响应是ASCII文本，头部和Body分界），<strong>可读性高</strong></p><ul><li><p>每次请求/响应都发送完整的头部，存在大量重复开销</p></li><li><p>报文首部不压缩，报文主体压缩</p></li></ul></li><li><p>靠<strong>多个TCP连接</strong>并发加载资源，数据包丢失时容易造成<strong>队头阻塞</strong></p></li></ul><h4 id="http2" tabindex="-1"><a class="header-anchor" href="#http2"><span>HTTP2</span></a></h4><p><strong>实现多路复用</strong>：</p><ul><li>在<strong>一个</strong> TCP 连接上同时传输多个请求与响应，解决HTTP/1.1的队头阻塞问题（但仍存在TCP层的队头阻塞）</li></ul><p><strong>首部压缩</strong>：</p><ul><li>使用动态表与静态表减少冗余，降低带宽占用</li></ul><p><strong>二进制分帧</strong>：</p><ul><li><p>将报文拆分为<strong>首部帧</strong>和<strong>数据帧</strong>等类型</p></li><li><p>每个帧包含流标识符（<code>Stream_ID</code>），可按流独立组装</p></li></ul><h4 id="http3" tabindex="-1"><a class="header-anchor" href="#http3"><span>HTTP3</span></a></h4><p><strong>核心</strong>：整合</p><ul><li>把传输层从<strong>TCP</strong>改为<strong>QUIC（基于UDP）</strong>，解决<strong>TCP队头阻塞</strong>问题</li><li>保留HTTP2的<strong>二进制分帧</strong></li><li><strong>握手</strong>：在<strong>QUIC中集成TLS1.3握手</strong></li></ul><figure><img src="'+y+'" alt="image-20251014171229965" tabindex="0" loading="lazy"><figcaption>image-20251014171229965</figcaption></figure><h3 id="https" tabindex="-1"><a class="header-anchor" href="#https"><span>HTTPS</span></a></h3><p><strong>核心</strong>：通过<strong>非对称加密</strong>安全的交换一个<strong>对称加密的会话密钥</strong></p><p>默认端口是<strong>443</strong></p><p>是对<code>Http</code>的升级，后面的<code>S</code>指的是<code>SSL/TLS</code></p><ul><li><p><code>Https</code> = <code>Http</code> + <code>SSL/TLS</code></p></li><li><p><code>SSL/TLS</code>是一种加密安全协议，可以对发起http请求的请求和响应进行加密</p></li><li><p><code>SSL</code>是<code>TLS</code>的前身，现在很多浏览器都支持<code>TLS</code></p></li></ul><p><strong>对称加密</strong></p><p><strong>加密和解密用的是同一个密钥</strong></p><ul><li>发送方用密钥和加密算法<strong>对明文进行加密</strong></li><li>接收方用密钥和加密算法<strong>对密文进行还原</strong></li></ul><p>分发密钥时就会遇到<strong>挑战</strong>，通过网络传输的话<strong>密钥容易被黑客截取</strong>，黑客可以很轻松对密文进行还原</p><p><strong>非对称加密</strong></p><p><strong>客户端和服务端各使用一把公钥和一把私钥，公钥可进行传递，用于加密，私钥不可泄漏，用于解密</strong></p><ul><li>发送方在网络上获取公钥，用自己的<strong>私钥</strong>和公钥对信息进行加密</li><li>接收方同样用<strong>私钥</strong>和公钥对信息进行解密</li><li>黑客无法知道<strong>私钥</strong>是什么，也就无法解密信息</li></ul><figure><img src="'+H+'" alt="image-20251012193353851" tabindex="0" loading="lazy"><figcaption>image-20251012193353851</figcaption></figure><p><strong>SSL证书</strong></p><p>将网站的<strong>身份信息与一个公钥</strong>进行绑定，并由权威的**证书颁发机构（CA）**进行数字签名，证明其真实性</p><p><strong>TLS1.2握手流程（在这之前，服务端和客户端会进行TCP连接）</strong></p><ol><li>客户端发送<code>Client Hello</code>，TLS版本，加密套件和<strong>第1随机数</strong>（<code>Client Random</code>）给服务端 <ul><li>第1随机数为一个由<strong>客户端</strong>生成的随机字符串</li><li>客户端发送<strong>它支持的加密套件列表</strong>供服务端选择</li></ul></li><li>服务端发送<code>Server Hello</code>，TLS版本，加密套件和<strong>第2随机数</strong>（<code>Server Random</code>）给客户端 <ul><li>第2随机数为一个由<strong>服务端</strong>生成的随机字符串</li><li>此时返回给客户端服务端所选择的<strong>加密套件</strong></li></ul></li><li>服务端发送<strong>证书</strong>给客户端 <ul><li>证书包含了服务器的<strong>公钥、域名、颁发机构、有效期</strong>等信息</li></ul></li><li>服务端进行<code>Server Key Exchange</code>，发送自己的<strong>临时公钥</strong></li><li>服务端发送<code>Server Hello Done</code>，告诉客户端<strong>信息发送完毕</strong></li><li>客户端<strong>验证证书</strong>，如果证书不通过，连接中止</li><li>客户端生成一个<strong>预主密钥</strong>，使用<strong>服务端提供的公钥</strong>进行加密，然后发送给<strong>服务端</strong></li><li>服务端利用自己的<strong>私钥解密</strong>得到<strong>预主密钥</strong><ul><li>客户端和服务端按照<strong>约定好的算法对这三个随机数生成相同的会话密钥</strong></li></ul></li><li>客户端告诉服务端<strong>切换密码规范</strong>，使用刚刚生成的<strong>会话密钥</strong>对会话内容进行加密</li><li>客户端发送<code>Client Finished</code>完成消息</li><li>服务端发送<code>Finished</code>消息</li></ol><p><strong>握手总结</strong></p><ul><li><strong>预主密钥</strong>是客户端生成的第3个随机数</li><li>后续的信息传输使用<strong>会话密钥</strong></li></ul><figure><img src="'+D+'" alt="image-20251012195424252" tabindex="0" loading="lazy"><figcaption>image-20251012195424252</figcaption></figure>',171)])])}const U=t(N,[["render",A]]),O=JSON.parse('{"path":"/backend/CN.html","title":"计网常见协议","lang":"zh-CN","frontmatter":{"title":"计网常见协议","author":"xbZhong","isOriginal":true,"article":true,"category":"backend","timeline":true,"icon":"streamline:network-solid","date":"2025-10-13T00:00:00.000Z","description":"计网常见知识 常见含义 ISP：互联网服务提供商，如中国电信、中国联通等 MAC： 网络接口卡（网卡） 在制造时固化的一个全球唯一标识符 TCP/IP模型 OSI和TCP/IP image-20251013214454674image-20251013214454674 如上图所示： 我们使用的HTTPS、FTP、DHCP、以及HTTP都属于应用层 T...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"计网常见协议\\",\\"image\\":[\\"https://xbzhong.cn/screenshot/backend/image-20251013214454674.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013121751180.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013130002349.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013124408713.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013121843576.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013112742698.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013113529447.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013121120752.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013121537369.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013222829174.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013221831854.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013222040076.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013222333237.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251014122953171.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251014123604469.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251014123732540.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251014123747948.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013203754926.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013200644701.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013201120277.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013201551042.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251013220614655.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251014171229965.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251012193353851.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251012195424252.png\\"],\\"datePublished\\":\\"2025-10-13T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-14T12:10:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xbZhong\\"}]}"],["meta",{"property":"og:url","content":"https://xbzhong.cn/backend/CN.html"}],["meta",{"property":"og:site_name","content":"阿b的博客"}],["meta",{"property":"og:title","content":"计网常见协议"}],["meta",{"property":"og:description","content":"计网常见知识 常见含义 ISP：互联网服务提供商，如中国电信、中国联通等 MAC： 网络接口卡（网卡） 在制造时固化的一个全球唯一标识符 TCP/IP模型 OSI和TCP/IP image-20251013214454674image-20251013214454674 如上图所示： 我们使用的HTTPS、FTP、DHCP、以及HTTP都属于应用层 T..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xbzhong.cn/screenshot/backend/image-20251013214454674.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-14T12:10:28.000Z"}],["meta",{"property":"article:author","content":"xbZhong"}],["meta",{"property":"article:published_time","content":"2025-10-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-14T12:10:28.000Z"}]]},"git":{"createdTime":1760366416000,"updatedTime":1760443828000,"contributors":[{"name":"BO","username":"BO","email":"2396768163@qq.com","commits":2,"url":"https://github.com/BO"}]},"readingTime":{"minutes":14.06,"words":4218},"filePathRelative":"backend/CN.md","excerpt":"<h2>计网常见知识</h2>\\n<h3>常见含义</h3>\\n<p><strong>ISP</strong>：互联网服务提供商，如中国电信、中国联通等</p>\\n<p><strong>MAC</strong>： <strong>网络接口卡（网卡）</strong> 在制造时固化的一个<strong>全球唯一标识符</strong></p>\\n<h3>TCP/IP模型</h3>\\n<p><strong>OSI和TCP/IP</strong></p>\\n<figure><img src=\\"/screenshot/backend/image-20251013214454674.png\\" alt=\\"image-20251013214454674\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20251013214454674</figcaption></figure>","autoDesc":true}');export{U as comp,O as data};
