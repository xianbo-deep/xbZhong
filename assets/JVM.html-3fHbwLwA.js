import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as a,o as l}from"./app-C9Zz3E--.js";const t="/screenshot/backend/image-20250827103136127.png",e="/screenshot/backend/image-20250827121529235.png",r="/screenshot/backend/image-20250827165053890.png",g="/screenshot/backend/image-20250828104007723.png",p="/screenshot/backend/image-20250828145345501.png",o="/screenshot/backend/image-20250828114310579.png",h="/screenshot/backend/image-20250828115521211.png",d="/screenshot/backend/image-20250828120952341.png",c="/screenshot/backend/image-20250828142008540.png",k="/screenshot/backend/image-20250829110329036.png",u="/screenshot/backend/image-20250828152526384.png",m="/screenshot/backend/image-20250828155651944.png",A="/screenshot/backend/image-20250828160443690.png",y="/screenshot/backend/image-20250828163247278.png",b="/screenshot/backend/image-20250828181256837.png",B="/screenshot/backend/image-20250828182043377.png",f="/screenshot/backend/image-20250828190129331.png",v="/screenshot/backend/image-20250828184709777.png",C="/screenshot/backend/image-20250829130545212.png",F="/screenshot/backend/image-20250829140619318.png",x="/screenshot/backend/image-20250829141616665.png",E="/screenshot/backend/image-20250829160259912.png",D="/screenshot/backend/image-20250829160328473.png",z="/screenshot/backend/image-20250829160016236.png",_="/screenshot/backend/image-20250829171806375.png",j="/screenshot/backend/image-20250830162724929.png",S="/screenshot/backend/image-20250830163035897.png",J="/screenshot/backend/image-20250830163831847.png",G="/screenshot/backend/image-20250830164027933.png",M="/screenshot/backend/image-20250830165211992.png",T="/screenshot/backend/image-20250830165359547.png",L="/screenshot/backend/image-20250830171153722.png",w="/screenshot/backend/image-20250830173009222.png",P="/screenshot/backend/image-20250831121409514.png",R="/screenshot/backend/image-20250831122640955.png",V="/screenshot/backend/image-20250831123228657.png",q="/screenshot/backend/image-20250901101347721.png",I="/screenshot/backend/image-20250901101838489.png",O="/screenshot/backend/image-20250901104525184.png",K="/screenshot/backend/image-20250901104628452.png",N="/screenshot/backend/image-20250901104756886.png",Z="/screenshot/backend/image-20250901105053041.png",W="/screenshot/backend/image-20250901105235378.png",U="/screenshot/backend/image-20250902102018076.png",H="/screenshot/backend/image-20250902102115597.png",Y="/screenshot/backend/image-20250903112910186.png",X="/screenshot/backend/image-20250903113535275.png",Q="/screenshot/backend/image-20250903113953843.png",$="/screenshot/backend/image-20250903120801670.png",ss="/screenshot/backend/image-20250903120952183.png",is="/screenshot/backend/image-20250903151239017.png",ns="/screenshot/backend/image-20250903122649561.png",as="/screenshot/backend/image-20250903152602772.png",ls="/screenshot/backend/image-20250903155034850.png",ts="/screenshot/backend/image-20250903160648014.png",es="/screenshot/backend/image-20250904110706975.png",rs="/screenshot/backend/image-20250904111010015.png",gs="/screenshot/backend/image-20250904111838983.png",ps="/screenshot/backend/image-20250904111724970.png",os="/screenshot/backend/image-20250904111740070.png",hs="/screenshot/backend/image-20250904111646895.png",ds="/screenshot/backend/image-20250904111702177.png",cs="/screenshot/backend/image-20250904114208683.png",ks="/screenshot/backend/image-20250906232331562.png",us="/screenshot/backend/image-20250906232349688.png",ms="/screenshot/backend/image-20250906232407451.png",As="/screenshot/backend/image-20250906232601037.png",ys="/screenshot/backend/image-20250906233007584.png",bs="/screenshot/backend/image-20250906233509833.png",Bs="/screenshot/backend/image-20250906234122459.png",fs="/screenshot/backend/image-20250906235256136.png",vs="/screenshot/backend/image-20250906235613653.png",Cs="/screenshot/backend/image-20250907000221166.png",Fs="/screenshot/backend/image-20250907000236931.png",xs="/screenshot/backend/image-20250907102050286.png",Es="/screenshot/backend/image-20250907102229127.png",Ds="/screenshot/backend/image-20250907104350757.png",zs="/screenshot/backend/image-20250907105411214.png",_s="/screenshot/backend/image-20250907105423998.png",js="/screenshot/backend/image-20250907105940188.png",Ss={};function Js(Gs,s){return l(),n("div",null,[...s[0]||(s[0]=[a('<p><strong>java编译流程</strong></p><ul><li>由<code>javac</code> 把<code>.java</code> 文件编译成<code>.class</code>文件</li><li>再由JVM把<code>.class</code>文件编译成二进制文件给操作系统执行</li><li>因此它十分适合跨操作系统开发</li></ul><h2 id="jvm" tabindex="-1"><a class="header-anchor" href="#jvm"><span>JVM</span></a></h2><p><strong>就是java虚拟机</strong></p><ul><li><strong>即时编译（JIT）：​​​​</strong>会监控代码执行频率，找出热点代码，把热点代码编译成机器码后存储在内存</li><li><strong>内存管理：​​​​</strong>利用JVM的垃圾回收机制自动回收不用的对象</li></ul><p><strong>组成部分：​​​​</strong></p><ul><li><strong>类加载器：​​​​</strong>加载字节码文件到内存</li><li><strong>运行时数据区域：​​​​</strong>存储类和接口</li><li><strong>执行引擎：​​​​</strong>将字节码转换为机器码</li><li><strong>本地接口：​​​​</strong>调用本地<strong>已经编译</strong>的用c/cpp编写的方法</li></ul><h3 id="字节码文件" tabindex="-1"><a class="header-anchor" href="#字节码文件"><span>字节码文件</span></a></h3><p><strong>以二进制方式存储</strong></p><figure><img src="'+t+`" alt="image-20250827103136127" tabindex="0" loading="lazy"><figcaption>image-20250827103136127</figcaption></figure><p><strong>组成部分：​​​​</strong></p><ul><li><strong>基础信息：​​​​</strong>字节码文件对应的JDK版本号，访问标识，类、父类和接口**（指针/地址）**</li><li><strong>常量池：​​​​</strong>保存了各种<strong>字面量</strong>和<strong>符号引用</strong>，如字符串常量，类或接口名、字段名**（实际的字符串名称）**</li><li><strong>字段：​​​​</strong>当前类或接口声明的<strong>字段信息</strong><ul><li>如果是<code>static final</code>修饰，字节码文件中会有<code>ConstantValue</code>属性</li></ul></li><li><strong>方法：​​​​</strong>当前类或接口声明的<strong>方法信息</strong><ul><li>方法如果没有<code>Code</code>属性，其<strong>就是抽象方法</strong></li></ul></li><li><strong>属性：​​​​</strong>存储类的属性，比如源码文件名，内部类列表 <ul><li>为<strong>类、字段或方法</strong>提供额外的元数据（描述信息），存储在<strong>类、字段或方法信息</strong>当中</li></ul></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 常量池存储代码中所有的字面名称</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 基础信息：存Person、Person的父类以及Person实现的接口的索引</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Person</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E06C75;"> java.io.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Serializable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 字段信息</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 字段信息里面也会存储属性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 方法信息</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 属性：每个方法都包含一个Code属性</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> name;         </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        count++; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getCount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> count; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/** </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*属性里面会存储一个类级别的属性表</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">*整个类会有一个SourceFile属性</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">**/</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基础信息" tabindex="-1"><a class="header-anchor" href="#基础信息"><span>基础信息</span></a></h4><ul><li><strong>魔数：​​​​</strong>字节码文件中，将文件头称作魔数 <ul><li>软件是使用文件的<strong>头几个字节</strong>去校验文件类型的</li><li>Java字节码的头几个字节是<code>CAFFBABE</code></li></ul></li><li><strong>主副版本号：​​​​</strong>判断当前字节码的版本和运行时的JDK是否兼容 <ul><li>计算方式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>大版本号</mtext><mo>=</mo><mtext>主版本号</mtext><mo>−</mo><mn>44</mn></mrow><annotation encoding="application/x-tex">大版本号=主版本号-44</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">大版本号</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord cjk_fallback">主版本号</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">44</span></span></span></span></li></ul></li></ul><h4 id="常量池" tabindex="-1"><a class="header-anchor" href="#常量池"><span>常量池</span></a></h4><p><strong>作用：避免相同的内容重复定义，节省空间</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Test</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;我爱你&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;我爱你&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>存储方式：​​​​</strong></p><p><strong>前提是使用了</strong><code>static final</code><strong>声明</strong>，否则不会有常量值索引</p><ul><li>每个字段都会有一个常量值索引，常量值索引指向<strong>常量池的某一个编号（字符串）</strong></li><li>常量池的编号（字符串）并<strong>不直接存储字符串字面量</strong>，它会指向<strong>常量池中的另一个编号</strong>，里面存储真正的<strong>字符串字面量</strong></li><li>如果字段名和字面量相同，那么<strong>字段名</strong>存储的索引会直接<strong>指向真正的字符串字面量</strong>，节省内存</li><li><strong>注意：​​​​</strong>常量池的字符串会直接加载到字符串常量池中，而字符串字面量也需要进行存储，因为字段名可能用到</li></ul><h4 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h4><p>临时的数据结构，<strong>方法开始时建立，结束时销毁</strong></p><ul><li><strong>操作数栈：​​​​</strong>临时存放一些数据</li><li><strong>局部变量表：​​​​</strong>方法声明的局部变量，底层是<strong>数组</strong>实现的 <ul><li><code>main</code>方法的<code>args</code>会占据<strong>数组的一个下标空间</strong></li></ul></li></ul><p><strong>源代码</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字节码指令</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>iconst_0 </span></span>
<span class="line"><span>istore_1 </span></span>
<span class="line"><span>iload_1</span></span>
<span class="line"><span>iconst_1</span></span>
<span class="line"><span>iadd</span></span>
<span class="line"><span>istore_2</span></span>
<span class="line"><span>return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>iconst_0</code>：将整数<code>0</code>压入操作数栈</li><li><code>istore_1</code>：从操作数栈弹出数据并放入局部变量表中的<code>1</code>号位置</li><li><code>iload_1</code>：从局部变量表中的<code>1</code>号数据复制一份放入操作数栈</li><li><code>iadd</code>：把操作数栈中<strong>栈顶部</strong>的两个元素进行相加，然后存放到栈中</li><li><code>iinc 1 by 1</code>：对<strong>局部变量表</strong>中的1号位置的数据加1</li></ul><p>看一个例子</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">++;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">j </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ++</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">j</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>分析：</p><ol><li><p>第一个例子：先store到局部变量表，<strong>再load到操作数栈，然后自增</strong>，再从操作数栈加载到局部变量表（直接覆盖）</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>iconst_0</span></span>
<span class="line"><span>istore_1</span></span>
<span class="line"><span>iload_1</span></span>
<span class="line"><span>iinc 1 by 1</span></span>
<span class="line"><span>istore_1</span></span>
<span class="line"><span>return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>第二个例子：先store到局部变量表，<strong>再自增，然后load到操作数栈</strong>，再从操作数栈加载到局部变量表（先自增再加载到操作数栈，因此<code>j</code>是1）</p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>iconst_0</span></span>
<span class="line"><span>istore_1</span></span>
<span class="line"><span>iinc 1 by 1</span></span>
<span class="line"><span>iload_1</span></span>
<span class="line"><span>istore_1</span></span>
<span class="line"><span>return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="类的生命周期" tabindex="-1"><a class="header-anchor" href="#类的生命周期"><span>类的生命周期</span></a></h3><p>五个阶段：</p><ul><li>加载</li><li>连接：可以细分为验证、准备、解析</li><li>初始化</li><li>使用</li><li>卸载</li></ul><h4 id="加载" tabindex="-1"><a class="header-anchor" href="#加载"><span><strong>加载</strong></span></a></h4><ol><li>类加载器根据<strong>类的全限定名</strong>通过不同的渠道<strong>以二进制流</strong>的方式获取<strong>字节码信息</strong></li><li>将字节码信息保存到方法区中，会生成一个<code>InstanceKlass</code>对象，保存类的<strong>所有信息（之前说的字节码文件里面的信息）</strong></li></ol><figure><img src="`+e+'" alt="image-20250827121529235" tabindex="0" loading="lazy"><figcaption>image-20250827121529235</figcaption></figure><ol start="3"><li>会在<strong>堆</strong>中生成一份与方法区中数据类似的<code>java.lang.Class</code>对象（<strong>字节码被加载到 JVM 后解析成的运行时结构</strong>）</li></ol><ul><li><strong>静态数据是存放在堆中的</strong></li><li>有助于我们<strong>利用反射去获取类的信息</strong>，反射获取到的<code>Class</code>是堆<strong>中的数据</strong></li><li>同时，堆中的数据和方法区中的数据会建立一个关联</li><li>开发者new对象的时候是操作<strong>堆</strong>中的用<code>java.lang.Class</code>包装的类 <ul><li>方法区中的对象是c++编写的，开发者无法直接操作</li><li>方法区中的数据开发者<strong>不一定都要用到</strong>（虚方法表等）</li></ul></li></ul><h4 id="连接" tabindex="-1"><a class="header-anchor" href="#连接"><span><strong>连接</strong></span></a></h4><ul><li><p>验证：验证内容是否满足Java虚拟机规范</p><ul><li>校验<strong>文件格式以及主次版本号</strong></li><li><strong>元信息验证</strong>，例如类必须有父类</li><li>验证字节码指令的<strong>正确性</strong></li><li><strong>符号引用验证</strong>，例如是否访问了其它类的私有属性</li></ul></li><li><p>准备：给<strong>静态变量</strong>赋值（默认值）</p><ul><li><code>int</code>：0</li><li><code>double</code>：0.0</li><li>引用数据类型：null</li><li>如果使用<code>final</code>修饰了，在准备阶段会直接赋值（不是默认值）</li></ul></li><li><p>解析：将常量池中的符号引用<strong>替换成实际内存地址的直接引用</strong></p></li></ul><h4 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span><strong>初始化</strong></span></a></h4><ul><li>执行<strong>静态代码块</strong>中的代码，为<strong>静态变量</strong>赋值</li><li><strong>类的初始化会</strong>执行字节码文件中的<code>clinit</code>部分的字节码指令 <ul><li>执行顺序和代码里面的顺序有关</li></ul></li></ul><figure><img src="'+r+`" alt="image-20250827165053890" tabindex="0" loading="lazy"><figcaption>image-20250827165053890</figcaption></figure><p><strong>源代码</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Demo1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        value </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>字节码指令</strong></p><div class="language-text line-numbers-mode" data-highlighter="shiki" data-ext="text" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-text"><span class="line"><span>iconst_1</span></span>
<span class="line"><span>putstatic #2 &lt;init/Demo1.value : I&gt;</span></span>
<span class="line"><span>iconst_2</span></span>
<span class="line"><span>putstatic #2 &lt;init/Demo1.value : I&gt;</span></span>
<span class="line"><span>return</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>putstatic #2 &lt;init/Demo1.value : I&gt;</code>：从操作数栈弹出一个值赋值给常量池编号为<code>2</code>的变量，也就是<code>Demo1</code>里面的<code>value</code>变量</li></ul><p>以下几种方式会<strong>导致类的初始化</strong>：</p><ul><li>访问一个类的静态变量或者静态方法 <ul><li>变量是<code>final</code>修饰的且等号右边是常量<strong>不会触发初始化！！！</strong></li><li>声明了静态变量但是没赋值<strong>不会触发初始化！！！</strong></li></ul></li><li>new一个该类的对象时 <ul><li>实例变量和实例代码块<strong>先执行</strong></li><li><strong>再执行</strong>构造方法</li></ul></li><li>执行main方法当前的类</li><li>调用<code>Class.forName()</code>时 <ul><li>可以指定参数<strong>不让类初始化</strong></li></ul></li></ul><p><strong>继承情况</strong>下的类的初始化：</p><ul><li>直接访问父类的静态变量，<strong>不会触发子类初始化</strong></li><li>子类的初始化<code>clinit</code>调用之前，会先调用父类的<code>clinit</code>初始化方法</li></ul><h3 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器"><span>类加载器</span></a></h3><p><strong>任务：​​​​</strong>负责获取二进制的字节码信息，在方法区和堆上创建对象<strong>是调取虚拟机的接口实现的</strong></p><h4 id="类加载器的分类" tabindex="-1"><a class="header-anchor" href="#类加载器的分类"><span>类加载器的分类</span></a></h4><p><strong>JDK8之前</strong></p><p>分类：</p><ul><li><p>一类是Java实现的，继承自抽象类<code>ClassLoader</code></p><ul><li><code>Extension CLassLoader</code>：扩展类加载器，加载通用的类</li><li><code>Application ClassLoader</code>：应用程序类加载器，加载自己编写的或者第三方<code>jar</code>包的</li></ul></li><li><p>一类是虚拟机底层用cpp实现的，加载程序运行时的基础类</p><ul><li><code>Bootstrap ClassLoader</code>：启动类加载器，加载核心类</li></ul></li></ul><p>从虚拟机角度来看，只存在两种类加载器：</p><ul><li><code>Bootstrap</code>启动类加载器</li><li>其它类加载器，全部继承自<code>java.lang.ClassLoader</code></li></ul><p><code>Bootstrap ClassLoader</code></p><ul><li>默认加载<code>/jre/lib</code>目录下的类文件，后缀都是<code>.jar</code></li><li><strong>不允许</strong>我们在代码中获取启动类加载器</li><li>可以利用<strong>虚拟机参数</strong>让我们的类被启动类加载器加载</li></ul><p><code>Extension CLassLoader</code></p><ul><li>源码位于<code>sun.misc.Launcher</code>中，静态内部类，继承自<code>URLClassLoader</code>，多级继承</li><li>默认加载<code>/jre/lib/ext</code>目录下的类文件</li></ul><p><code>Application ClassLoader</code></p><ul><li>源码位于<code>sun.misc.Launcher</code>中，静态内部类，继承自<code>URLClassLoader</code>，多级继承</li><li>默认加载<code>classpath</code>下的文件，也就是<strong>自己编写的和第三方依赖的类文件</strong></li></ul><figure><img src="`+g+'" alt="image-20250828104007723" tabindex="0" loading="lazy"><figcaption>image-20250828104007723</figcaption></figure><p><strong>JDK8之后</strong></p><ul><li><p>JDK9之后引入了module的概念，类加载器在设计上发生了很多变化</p><ol><li>启动类加载器<code>BootClassLoader</code>使用<code>java</code>编写，位于<code>jdk.internal.loader.ClassLoader</code>中</li><li><code>BootClassLoader</code>继承自<code>BuiltinClassLoader</code>实现<strong>从模块中找到要加载的字节码</strong>文件</li></ol><figure><img src="'+p+'" alt="image-20250828145345501" tabindex="0" loading="lazy"><figcaption>image-20250828145345501</figcaption></figure><ol start="3"><li>扩展类加载器被替换成平台类加载器(<code>Platform Class Loader</code>)，平台类加载器遵循<strong>模块化方式</strong>加载字节码文件，因此也继承了<code>BuiltinClassLoader</code></li><li>应用程序类加载器也继承<code>BuiltinClassLoader</code></li></ol></li></ul><h4 id="双亲委派机制" tabindex="-1"><a class="header-anchor" href="#双亲委派机制"><span>双亲委派机制</span></a></h4><p><strong>核心：解决一个类到底由谁加载的问题</strong></p><p><strong>作用：保证类加载安全性，避免重复加载</strong></p><p>工作流程：</p><ul><li>一个类加载器接受到加载类的人物的时候会<strong>自底向上查找</strong>是否加载过</li><li>加载过的的话，直接加载类</li><li>如果三个类加载器都没加载过，<strong>向下尝试加载</strong></li><li>类加载器会查看要加载的类是否在自己负责的路径下，如果是，则直接加载，反之则向下委派</li></ul><figure><img src="'+o+'" alt="image-20250828114310579" tabindex="0" loading="lazy"><figcaption>image-20250828114310579</figcaption></figure><p><strong>他们之间是上下级关系而不是继承关系</strong></p><h4 id="打破双亲委派机制" tabindex="-1"><a class="header-anchor" href="#打破双亲委派机制"><span>打破双亲委派机制</span></a></h4><h5 id="自定义类加载器" tabindex="-1"><a class="header-anchor" href="#自定义类加载器"><span><strong>自定义类加载器</strong></span></a></h5><p><strong>注意：​​​​</strong> <strong>相同的类加载器加载相同的类限定名</strong>才会冲突，才会被认为是同一个类</p><p>举个例子：Tomcat服务器</p><ul><li>里面可以运行多个web应用，如果出现了相同限定名的类，Tomcat要保证这两个类都能被加载</li><li>因此，要为每个应用创建一个<strong>隔离的类加载器</strong></li></ul><figure><img src="'+h+'" alt="image-20250828115521211" tabindex="0" loading="lazy"><figcaption>image-20250828115521211</figcaption></figure><p><strong>自定义类加载器</strong></p><p><code>ClassLoader</code>有四个核心方法：</p><ul><li><code>loadClass</code>：类加载的<strong>入口</strong>，提供了双亲委派机制，内部调用<code>findClass</code><ul><li>有个<code>resolve</code>参数，是用来<strong>决定是否执行连接</strong></li></ul></li><li><code>findClass</code>：获取二进制数据之后调用<code>defineClass</code></li><li><code>defineClass</code>：做类名的校验，<strong>调用虚拟机底层的方法</strong>将字节码信息<strong>加载到方法区和堆</strong></li><li><code>resolveClass</code>：执行类生命周期的连接阶段</li></ul><figure><img src="'+d+`" alt="image-20250828120952341" tabindex="0" loading="lazy"><figcaption>image-20250828120952341</figcaption></figure><p>案例：自定义类加载器</p><ul><li>会对以<code>java.</code>开头的类会有保护机制，虚拟机认为这种类只能由启动类加载</li><li>自定义类加载器默认的父加载器是<code>ApplacationClassLoader</code>，要修改父加载器的话，<strong>重写<code>ClassLoader()</code>构造方法即可</strong></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 继承ClassLoader</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BreakClassLoader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> basePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> FINAL_TEXT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.class&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setBasePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> basePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">basePath</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> basePath;}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">[] </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadClassData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){...}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 打破双亲委派机制</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ClassNotFoundException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stratwith</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;java.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> super</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 获取二进制流</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">        byte</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loadClassData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(name,data,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        BreakClassLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> classLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BreakClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		classLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setBasePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;D:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">lib</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\\\</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">         Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> classLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">loadClass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.yourcompany.YourClass&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> instance</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> clazz</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="线程上下文类加载器" tabindex="-1"><a class="header-anchor" href="#线程上下文类加载器"><span><strong>线程上下文类加载器</strong></span></a></h5><p><strong>SPI机制</strong></p><ul><li>JDK内置的一种<strong>服务提供发现机制</strong></li><li>工作原理：（JDBC案例） <ul><li>驱动需要暴露给JDBC的<code>DriverManager</code>（管理驱动的类）使用，由它来引入不同的数据库驱动，<code>DriverManager</code><strong>由启动类加载器加载</strong></li><li>驱动需要存在固定文件夹下<code>META-INF/services</code>，以<strong>接口的全限定名命名文件名</strong>，<strong>对应的文件里面</strong>应该写<strong>该接口的实现类</strong></li><li>使用<code>ServiceLoader</code>加载实现类 <ul><li>里面的<code>.load()</code>方法需要传递接口的字节码文件，然后这个方法返回一个<code>ServiceLoader</code>实例</li><li>用这个实例去扫描<code>META-INF/services</code>目录，得到类的全限定名列表</li><li>根据这个类的类名，进行类的加载，并且创建对象返回给用户</li></ul></li></ul></li><li><code>.load()</code>方法使用了线程上下文中<strong>保存的类加载器</strong>进行类的加载，这个类加载器一般是<strong>应用程序类加载器</strong></li><li>线程的类加载器<strong>默认都是应用程序类加载器</strong></li></ul><figure><img src="`+c+'" alt="image-20250828142008540" tabindex="0" loading="lazy"><figcaption>image-20250828142008540</figcaption></figure><p><strong>JDBC案例网上说法不一，有的认为打破了双亲委派机制，有的认为没有打破</strong></p><h5 id="osgi框架类加载器" tabindex="-1"><a class="header-anchor" href="#osgi框架类加载器"><span><strong>OSGI框架类加载器</strong></span></a></h5><ul><li>早期java没有模块化的思想，代码都放在<code>rt.jar</code>下进行管理</li><li>后来创建了OSGI框架进行模块化管理，它运训同级的类加载器进行委托加载，并且实现了<strong>热部署</strong>的功能</li></ul><h3 id="运行时数据区域" tabindex="-1"><a class="header-anchor" href="#运行时数据区域"><span>运行时数据区域</span></a></h3><p>把整个区域划分成两大类：</p><ul><li><strong>线程不共享：​​​​</strong>程序计数器，<code>Java</code>虚拟机栈，本地方法栈</li><li><strong>线程共享：​​​​</strong>方法区，堆（有线程安全问题）</li></ul><figure><img src="'+k+'" alt="image-20250829110329036" tabindex="0" loading="lazy"><figcaption>image-20250829110329036</figcaption></figure><h4 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器"><span>程序计数器</span></a></h4><p>程序计数器也叫做<strong>PC寄存器</strong>，存储当前<strong>要执行的字节码指令的地址</strong></p><ul><li>不会发生内存溢出</li><li>程序员无需对程序计数器做任何处理</li></ul><p>作用：</p><ul><li><p>控制程序指令的执行</p><ul><li><p>加载阶段，虚拟机将字节码文件中的指令读取到内存后，会把源文件的偏移量<strong>替换为内存地址</strong></p></li><li><p>代码执行过程中，程序计数器会<strong>记录下一行字节码指令的地址</strong>，执行完当前指令后，会<strong>根据程序计数器执行下一行指令</strong></p></li></ul></li></ul><figure><img src="'+u+'" alt="image-20250828152526384" tabindex="0" loading="lazy"><figcaption>image-20250828152526384</figcaption></figure><ul><li>多线程执行情况下，Java虚拟机可以通过程序计数器记录CPU切换前字节码文件<strong>执行到哪一行指令</strong></li></ul><h4 id="栈" tabindex="-1"><a class="header-anchor" href="#栈"><span>栈</span></a></h4><p>分成两部分：</p><ul><li><strong>Java虚拟机栈：​​​​</strong>保存在Java中实现的方法</li><li><strong>本地方法栈：​​​​</strong>保存在cpp实现的方法吗，用native声明的</li></ul><h5 id="java虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java虚拟机栈"><span><strong>Java虚拟机栈</strong></span></a></h5><ul><li>采用栈的数据结构来管理方法调用中的基本数据</li><li>每一个方法的调用使用一个<strong>栈帧</strong>来保存方法的基本信息</li></ul><figure><img src="'+m+'" alt="image-20250828155651944" tabindex="0" loading="lazy"><figcaption>image-20250828155651944</figcaption></figure><ul><li>随着线程的创建而创建，回收则会在线程的销毁时执行</li></ul><p><strong>栈帧的组成部分：​​​​</strong></p><p>局部变量表：方法执行过程中存放的所有的局部变量</p><ul><li><p>局部变量表中的槽是可以<strong>复用</strong>的</p><ul><li><p>保存的内容：<strong>实例方法的this对象，方法的参数，方法体中声明的局部变量</strong></p><ul><li><p>字节码文件中的局部变量表</p><ul><li>编号：根据声明顺序确定</li><li>起始PC：从<strong>哪一行字节码指令开始</strong>可以访问这个局部变量</li><li>长度：局部变量的生效范围</li><li>序号：槽的<strong>起始编号</strong></li></ul></li><li><p>栈帧中的局部变量表</p><ul><li>是一个数组，每一个位置称之为<strong>槽</strong></li><li>long和double类型占用<strong>两个槽</strong>，其他类型占用<strong>一个槽</strong></li></ul></li></ul></li><li><p><strong>实例方法中</strong>的序号为0的位置存放的是this，指的是当前调用方法的对象，运行时会在内存中<strong>存放实例对象的地址</strong></p></li></ul></li></ul><figure><img src="'+A+'" alt="image-20250828160443690" tabindex="0" loading="lazy"><figcaption>image-20250828160443690</figcaption></figure><p>操作数栈：存放临时数据的一块区域，<strong>编译的时候可以确定其最大深度</strong></p><p>帧数据：动态链接、方法出口、异常表</p><ul><li>动态链接：将符号引用转变为直接引用，就是把<strong>字节码指令中的符号引用</strong>（指向常量池）转变为<strong>直接指向内存地址的直接引用</strong>（指向运行时常量池）</li></ul><figure><img src="'+y+'" alt="image-20250828163247278" tabindex="0" loading="lazy"><figcaption>image-20250828163247278</figcaption></figure><ul><li>方法出口：方法结束时，栈帧会被弹出，程序计数器应该指向<strong>上一个栈帧中下一条指令的地址</strong>，在当前栈帧中，要<strong>存放上一个栈帧下一条指令的地址</strong></li><li>异常表：存放代码中异常的处理信息 <ul><li>起始PC：异常捕获生效的起始字节码指令的行数</li><li>结束PC：异常捕获生效的结束字节码指令的行数</li><li>跳转PC：出现异常之后要跳转到的字节码指令的行数</li></ul></li></ul><p><strong>栈的内存溢出</strong></p><ul><li><strong>栈帧太多</strong>，占用内存过大，超过栈内存，会导致内存溢出，出现<code>StackOverflowError</code>错误</li><li>不指定栈的大小，JVM将创建一个具有默认大小的栈</li><li>可以使用<code>-Xss</code>设置栈的内存 <ul><li>必须是1024的倍数</li></ul></li></ul><h5 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈"><span>本地方法栈</span></a></h5><p><strong>处理方式和Java虚拟机栈类似</strong></p><h4 id="堆" tabindex="-1"><a class="header-anchor" href="#堆"><span>堆</span></a></h4><ul><li><p>堆内存是空间最大的一块区域，创建出来且能够被开发者使用的对象都存在于堆上</p></li><li><p>栈上的局部变量表可以存放<strong>堆上对象的引用</strong></p></li><li><p>静态变量也可以存放堆上对象的引用，从而通过静态变量实现对象在<strong>线程间的共享</strong></p></li><li><p>堆内存有内存溢出的风险</p></li></ul><figure><img src="'+b+'" alt="image-20250828181256837" tabindex="0" loading="lazy"><figcaption>image-20250828181256837</figcaption></figure><ul><li>堆空间有三个需要关注的值，<code>used</code>、<code>total</code>、<code>max</code></li><li><code>used</code>指的是当前<strong>已使用</strong>的堆内存，<code>total</code>是虚拟机已经分配的<strong>可用</strong>堆内存，<code>max</code>是虚拟机可分配的<strong>最大</strong>堆内存 <ul><li><code>max</code>默认是系统内存的四分之一，<code>total</code>默认是系统内存的六十四分之一</li><li>服务端开发的时候，把<code>max</code>和<code>total</code>设置成相同的值，后续无需向虚拟机再次申请，<strong>减少申请并分配内存的时间开销</strong></li></ul></li></ul><figure><img src="'+B+'" alt="image-20250828182043377" tabindex="0" loading="lazy"><figcaption>image-20250828182043377</figcaption></figure><h4 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区"><span>方法区</span></a></h4><ul><li><p>JDK7以及之前的版本将方法区存放在<strong>堆区域</strong>中的永久代空间</p><ul><li>存类的元信息、运行时常量池、字符串常量池、类的静态变量</li></ul></li><li><p>JDK8及之后的版本将方法区存放在<strong>直接内存中的元空间</strong>中，元空间位于<strong>操作系统维护的直接内存中</strong></p><ul><li>元空间存类的元数据、运行时常量池</li><li>字符串常量池和类的静态变量被<strong>转移至堆空间</strong>，类的静态变量是存在<strong>堆空间的Class对象中的</strong></li></ul></li><li><p><strong>方法区也存在溢出问题</strong></p></li></ul><figure><img src="'+f+'" alt="image-20250828190129331" tabindex="0" loading="lazy"><figcaption>image-20250828190129331</figcaption></figure><p>存放基础信息的位置，线程共享，包含三部分内容：</p><p><strong>类的元信息：​​​​</strong>保存了所有类的基本信息</p><ul><li>存的是<code>InstanceKlass</code>对象，将字节码文件的所有信息都存在这个对象当中，还会存入<strong>虚方法表</strong>（实现多态）</li><li>常量池和方法会新开辟一块内存存储，<code>InstanceKlass</code>对象只是存储了他们的引用</li><li>在类的<strong>加载</strong>阶段完成</li></ul><figure><img src="'+v+`" alt="image-20250828184709777" tabindex="0" loading="lazy"><figcaption>image-20250828184709777</figcaption></figure><p><strong>运行时常量池：​​​​</strong>保存了<strong>字节码文件</strong>中的常量池内容</p><ul><li><p>字节码文件中通过编号查表的方式找到常量，这种常量池称为<strong>静态常量池</strong></p></li><li><p>当常量池加载到内存中之后，每一个常量的数据都可以通过地址去访问，叫做<strong>运行时常量池</strong></p></li></ul><p><strong>字符串常量池：​​​​</strong>保存了字符串常量</p><ul><li>JDK7之前是在方法区，之后被<strong>转移至堆内存</strong></li><li>字符串常量池存的是在代码中定义的常量字符串，相同的字符串只会存一份</li><li>new出来的字符串会放在堆中，局部变量表会存放这个对象的引用</li></ul><p><strong>不同jdk版本的区别</strong></p><p><code>.intern()</code>：将字符串对象添加到字符串常量池中</p><p><strong>jdk6及之前</strong></p><ul><li>jdk6的<code>.intern()</code>是把第一次遇到的<strong>字符串实例</strong>复制到永久代的字符串常量池中</li><li>jdk6及之前，字符串常量池存储的是<strong>字符串实例</strong></li><li>正常赋值，字符串实例会存储在字符串常量池；new的话，会在堆中开辟空间存储</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;think&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 在堆中创建对象存储&quot;think123&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // jdk6之前，调用.intern()方法是把字符串实例存到字符串常量池，因此此处返回false</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jdk7及之后</strong></p><ul><li>jdk7及之后，字符串常量池在堆上，<code>.intern()</code>会把第一次遇到的**字符串引用（引用指向堆中的空间）**放入到字符串常量池，无论是new还是正常赋值</li><li>jdk7及之后，无论是new还是正常赋值，字符串常量池存储的都是<strong>堆中对象的引用</strong></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;think&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;123&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 在堆中创建对象存储&quot;think123&quot;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">intern</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s1);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // jdk7之后，调用.intern()方法是把堆中对象的引用存到字符串常量池，因此此处返回true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存"><span>直接内存</span></a></h4><p>jdk4之后引入了<strong>NIO机制</strong>，使用了直接内存，主要解决以下两个问题</p><ol><li>Java堆中的对象不再使用会回收，但会影响到对象的创建和使用</li><li>可以提升IO操作的效率：<strong>直接放入直接内存即可，同时在堆上维护直接内存的引用</strong></li></ol><h3 id="执行引擎" tabindex="-1"><a class="header-anchor" href="#执行引擎"><span>执行引擎</span></a></h3><h4 id="自动垃圾回收" tabindex="-1"><a class="header-anchor" href="#自动垃圾回收"><span>自动垃圾回收</span></a></h4><ul><li>Garbage Collection，简称GC机制。通过垃圾回收器来对不再使用的对象完成自动的回收</li><li>主要负责将<strong>堆</strong>上的内存进行回收，<strong>C#，python，Go都有自己的垃圾回收器</strong></li></ul><h5 id="方法区的回收" tabindex="-1"><a class="header-anchor" href="#方法区的回收"><span>方法区的回收</span></a></h5><p>判定类被卸载，需要满足下面三个条件：</p><ol><li>此类的所有实例对象已经被回收，<strong>堆中不存在任何该类的实例对象以及子类对象</strong></li><li>加载该类的<strong>类加载器</strong>已经被回收</li><li>该类对应的<code>java.lang.Class</code>对象没有在<strong>任何地方被引用</strong></li></ol><p><code>System.gc()</code></p><ul><li>可以手动触发垃圾回收</li><li>注意：执行后并不一定立即回收，只是向JVM发送一个请求，<strong>是否要执行我们没法干预</strong></li></ul><p>常用于热部署的应用场景中</p><ul><li>每个jsp文件对应唯一的类加载器，当一个jsp文件被修改了，立刻卸载这个jsp文件的类加载器，然后重新创建类加载器，重新加载jsp文件</li></ul><h5 id="堆的回收" tabindex="-1"><a class="header-anchor" href="#堆的回收"><span>堆的回收</span></a></h5><ul><li>Java中的对象能否被回收，是根据对象<strong>是否被引用</strong>来决定的，如果对象被引用，则不允许被回收</li><li>如果是堆里面的对象<strong>循环引用</strong>，而<strong>栈里面没有变量存储这个对象引用</strong>，那么堆里面的对象也可以<strong>被回收</strong></li></ul><h6 id="引用计数法" tabindex="-1"><a class="header-anchor" href="#引用计数法"><span><strong>引用计数法</strong></span></a></h6><ul><li>为每个对象维护一个引用计数器，对象被引用时加1，取消引用时减1</li><li>会存在<strong>循环引用</strong>问题，当A引用B且B引用A的时候会出现对象无法被回收的问题</li></ul><h6 id="可达性分析算法" tabindex="-1"><a class="header-anchor" href="#可达性分析算法"><span><strong>可达性分析算法</strong></span></a></h6><p><strong>如果对象无法被GC root链查找到，则可以对对象进行回收</strong></p><p>我们称这种引用为<strong>强引用</strong></p><figure><img src="`+C+'" alt="image-20250829130545212" tabindex="0" loading="lazy"><figcaption>image-20250829130545212</figcaption></figure><p>将对象分为两类：</p><ul><li><p>垃圾回收的根对象（GC Root）：<strong>不会</strong>被GC回收</p><ul><li>线程Thread对象：引用线程栈帧中的<strong>方法参数，局部变量等</strong></li></ul><figure><img src="'+F+'" alt="image-20250829140619318" tabindex="0" loading="lazy"><figcaption>image-20250829140619318</figcaption></figure><ul><li>系统类加载器加载的<code>java.lang.Class</code>对象，引用类中的静态变量 <ul><li>这个对象持有对该类所有静态变量的引用，因为这个对象是由<strong>系统类加载器</strong>加载的，所有它不会被回收，也就意味着它引用的静态变量不会被回收</li></ul></li></ul><figure><img src="'+x+`" alt="image-20250829141616665" tabindex="0" loading="lazy"><figcaption>image-20250829141616665</figcaption></figure><ul><li>监视器对象，用来保存同步锁<code>synchronized</code>关键字持有的对象 <ul><li>被<code>synchronized</code>修饰的对象被监视器对象引用了，不能被回收</li></ul></li><li>本地方法调用时使用的全局对象</li></ul></li><li><p>普通对象</p></li></ul><h6 id="五种对象引用" tabindex="-1"><a class="header-anchor" href="#五种对象引用"><span>五种对象引用</span></a></h6><p><strong>强引用</strong></p><ul><li><strong>可达性分析算法</strong>就是强引用</li><li>对象被强引用，无法被回收</li></ul><p><strong>软引用</strong></p><ul><li><p>相较强引用是一种较弱的引用关系</p></li><li><p>当程序内存<strong>不足</strong>时，就会将软引用中的数据进行<strong>回收</strong></p></li><li><p>常用于缓存中</p></li><li><p>可以通过<code>SoftReference</code>类来实现软引用，并且它的对象<strong>需要被GC root关联</strong>到，否则它也会被回收</p><ul><li>可以把这个<code>SoftReference</code>类的对象看成一个盒子，里面<strong>存的就是一个对象</strong></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 创建软引用</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SoftReference</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[]</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> softReference </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SoftReference</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(bytes)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 取消强引用，后续内存不足的话会释放掉刚刚的bytes</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>SoftReference</code>提供了一套队列机制：可以通过这个队列获取到<strong>不包含对象的软引用对象</strong>，实现<strong>软引用对象的回收</strong><ol><li>软引用创建时，通过构造器<strong>传入引用队列</strong></li><li>在软引用中包含的对象被回收时，该软引用对象会被放入引用队列</li><li>通过代码遍历引用队列，把<code>SoftReference</code>的强引用<strong>删除</strong></li></ol></li></ul></li></ul><p><strong>弱引用</strong></p><ul><li>和软引用基本一致，相比软引用更弱，<strong>不管内存够不够都会直接回收</strong></li><li>使用<code>WebReference</code>类来实现弱引用，主要在<code>ThreadLocal</code>中使用</li><li>弱引用对象也可以使用<strong>引用队列进行回收</strong></li></ul><p><strong>虚引用和终结器引用</strong></p><ul><li><p>常规开发不会使用</p></li><li><p>虚引用也叫<strong>幽灵引用/幻影引用</strong>，<strong>不能</strong>通过虚引用对象获取到包含的对象</p><ul><li>唯一作用是当对象被垃圾回收器回收时可以接受到对应的通知</li><li>使用<code>PhantomReference</code>实现虚引用</li><li>解决了直接内存的内存释放问题 <ul><li>创建对象的时候需要向直接内存申请空间，当堆中的对象被释放掉后，直接内存的那部分空间也需要释放，此时可以使用虚引用监控堆中的对象，当堆中的对象被释放掉，接收通知，告诉直接内存释放内存</li></ul></li></ul></li><li><p>终结器引用：当对象需要被回收时，终结器引用会关联对象并放置在<code>Finalizer</code>类的引用队列中，然后由一条<code>FinalizerThread</code>线程从队列中获取对象，执行对象的<code>finalize</code>方法，对象第二次被回收时，才真正被回收</p><ul><li>可以用一个强引用在<code>finalize</code>方法中指向对象，从而实现对象的自救</li></ul></li></ul><h6 id="垃圾回收算法" tabindex="-1"><a class="header-anchor" href="#垃圾回收算法"><span>垃圾回收算法</span></a></h6><p><strong>核心思想：​​​​</strong></p><ul><li>找到内存中存活的对象</li><li>释放不再存活对象的内存</li></ul><p><strong>注意：​​​​</strong>垃圾回收过程会通过<strong>单独的GC线程</strong>来完成，但是有部分阶段需要停止所有的用户线程，这个过程被称之为<code>Stop The World</code>，即<code>STW</code>，<code>STW</code>时间过长会影响用户使用</p><p>三种评价标准：不可兼得！！！</p><ul><li>吞吐量：<strong>CPU 用于处理用户业务的时间</strong>与<strong>CPU 总时间</strong>的比值</li><li>最大暂停时间：<strong>垃圾回收过程中，导致应用程序停顿的最长时间</strong></li><li>堆使用效率：<strong>垃圾回收器管理堆内存的内存利用率和内存碎片化的程度</strong></li></ul><p>####### 标记清除算法</p><p><strong>工作流程：​​​​</strong></p><ol><li>标记阶段：使用可达性分析算法把所有存活的对象进行标记，用GC Root通过引用链遍历出<strong>所有存活的对象</strong></li><li>清除阶段：从内存删除没有被标记的对象</li></ol><figure><img src="`+E+'" alt="image-20250829160259912" tabindex="0" loading="lazy"><figcaption>image-20250829160259912</figcaption></figure><p><strong>缺点：​​​​</strong></p><ol><li>碎片化问题：对象被删除后会出现很多细小的内存单元，如果需要大的存储空间是无法进行分配的</li><li>分配速度慢：底层会用一个空闲链表去维护<strong>空闲的内存空间</strong></li></ol><p>####### 复制算法</p><p><strong>核心思想：​​​​</strong></p><ol><li>准备两块空间<code>From</code>空间和<code>To</code>空间，每次在对象分配阶段，只能使用<code>From</code>空间</li><li>垃圾回收阶段，将<code>From</code>中存活对象复制到<code>To</code>空间</li><li>将两块空间的<code>From</code>和<code>To</code>名字互换</li></ol><figure><img src="'+D+'" alt="image-20250829160328473" tabindex="0" loading="lazy"><figcaption>image-20250829160328473</figcaption></figure><p><strong>缺点：​​​​</strong></p><ul><li>内存利用效率低</li></ul><p><strong>优点：​​​​</strong></p><ul><li><p>吞吐量高</p></li><li><p>不会发生碎片化</p></li></ul><p>####### 标记整理算法</p><p>工作阶段：</p><ol><li>标记阶段：使用可达性分析算法把所有存活的对象进行标记，用GC Root通过引用链遍历出<strong>所有存活的对象</strong></li><li>整理阶段：将存活对象移动到堆的一端，清理掉<strong>非存活对象</strong>的内存空间</li></ol><figure><img src="'+z+'" alt="image-20250829160016236" tabindex="0" loading="lazy"><figcaption>image-20250829160016236</figcaption></figure><p><strong>缺点：​​​​</strong></p><ul><li>整理阶段效率低</li></ul><p><strong>优点：​​​​</strong></p><ul><li><p>内存使用效率高</p></li><li><p>不会发生碎片化</p></li></ul><p>####### 分代垃圾回收算法</p><p>将整个内存区域划分为年轻代和老年代：</p><ul><li>年轻代存放存活时间比较<strong>短</strong>的对象 <ul><li>伊甸园区（Eden）：对象刚创建的时候存储的区域</li><li>幸存者区：实现复制算法 <ul><li><code>S0</code></li><li><code>S1</code></li></ul></li></ul></li><li>老年代存放存活时间比较<strong>长</strong>的对象</li></ul><figure><img src="'+_+'" alt="image-20250829171806375" tabindex="0" loading="lazy"><figcaption>image-20250829171806375</figcaption></figure><p>工作流程：</p><ul><li>创建出来的对象首先被放入Eden区 <ul><li>如果Eden区满了，新创建的对象无法放入，就会触发<strong>年轻代的GC</strong>（Minor GC或者Young GC）</li><li>Minor GC会根据<strong>可达性分析算法</strong>判断<code>Eden</code>和<code>From</code>中哪些对象需要被回收，不需要回收的对象放进<code>To</code>区域</li><li>然后<code>From</code>和<code>To</code>互换名字</li></ul></li><li>每次Minor GC中都会为对象记录他的<strong>年龄</strong>，初始值为0，触发一次Minor GC年龄加1</li><li>晋升 <ul><li>当年龄到达阈值，对象会被晋升到老年代</li><li>当<strong>年轻代空间不足</strong>的时候，即使年龄<strong>没到达阈值</strong>，也会被晋升老年代中</li></ul></li><li>当老年代中空间不足，无法放入新的对象时，先尝试Minor GC，如果还是不足，就会触发<strong>Full GC</strong>，对<strong>整个堆进行垃圾回收</strong></li></ul><p>为什么要把堆分成<strong>年轻代和老年代</strong>？</p><ul><li>系统中的大部分对象都是在创建出来之后<strong>很快就不再使用</strong>，可以放入新生代</li><li>老年代存储的是需要<strong>长期存放的对象</strong></li><li>新生代使用复制算法，老年代使用标记-清除或者标记整理算法</li><li>分代设计允许只回收新生代</li></ul><h6 id="垃圾回收器" tabindex="-1"><a class="header-anchor" href="#垃圾回收器"><span>垃圾回收器</span></a></h6><p>可以用虚拟机参数指定要使用的垃圾回收器</p><p><strong>组合关系</strong></p><figure><img src="'+j+'" alt="image-20250830162724929" tabindex="0" loading="lazy"><figcaption>image-20250830162724929</figcaption></figure><p><strong>Serial垃圾回收器</strong></p><ul><li><strong>单线程串行</strong>回收年轻代的垃圾回收器</li><li>新生代的使用<strong>复制算法</strong>，老年代的使用<strong>标记-整理算法</strong></li></ul><figure><img src="'+S+'" alt="image-20250830163035897" tabindex="0" loading="lazy"><figcaption>image-20250830163035897</figcaption></figure><p><strong>年轻代-ParNew垃圾回收器</strong></p><ul><li>使用<strong>多线程</strong>进行垃圾回收</li><li>本质上是<strong>对Serial在多CPU下的优化</strong></li><li>可以与CMS老年代垃圾回收器搭配使用</li><li>使用<strong>复制算法</strong></li></ul><figure><img src="'+J+'" alt="image-20250830163831847" tabindex="0" loading="lazy"><figcaption>image-20250830163831847</figcaption></figure><p><strong>老年代-CMS垃圾回收器</strong></p><ul><li>关注的是系统的<strong>暂停时间</strong></li><li>允许用户线程和垃圾回收线程在某些步骤中<strong>同时执行</strong></li><li>使用<strong>标记清除算法</strong></li><li>工作步骤： <ol><li><strong>初始标记</strong>，标记GC Roots能直接关联到的对象</li><li>进行<strong>并发标记</strong>，标记所有的对象，找出哪些对象需要回收，哪些不需要，用户线程不需要暂停</li><li><strong>重新标记</strong>，停下用户线程，并发标记阶段有些对象会发生变化，产生错标漏标等</li><li><strong>并发清理</strong>，清理死亡的对象，用户线程不需要暂停</li></ol></li><li>缺点： <ul><li>CMS使用了标记清除算法，进行垃圾回收会出现大量内存碎片，需要进行整理，这需要让用户等待</li><li>老年代内存不足会被迫进行<code>Full GC</code>，CMS会退化成<strong>Serial Old单线程</strong>回收老年代</li></ul></li></ul><figure><img src="'+G+'" alt="image-20250830164027933" tabindex="0" loading="lazy"><figcaption>image-20250830164027933</figcaption></figure><p><strong>年轻代-Parallel Scavenge垃圾回收器</strong></p><ul><li><strong>多线程</strong>并行回收</li><li>关注的是<strong>系统吞吐量</strong></li><li>能够<strong>自动调整</strong>堆内存大小：堆内存小了，最大暂停时间就少了</li><li>使用<strong>复制算法</strong></li><li>JDK8默认使用</li></ul><figure><img src="'+M+'" alt="image-20250830165211992" tabindex="0" loading="lazy"><figcaption>image-20250830165211992</figcaption></figure><p><strong>老年代-Parallel Old垃圾回收器</strong></p><ul><li>使用<strong>标记整理</strong>算法</li><li>多线程并发</li><li>与<code>Parallel Scavenge</code>配合使用</li><li>JDK8默认使用</li></ul><figure><img src="'+T+'" alt="image-20250830165359547" tabindex="0" loading="lazy"><figcaption>image-20250830165359547</figcaption></figure><p>####### G1垃圾回收器！！！！</p><p><strong>需要预留堆空间！！！，否则堆空间不足，进行Full GC的时候会使用单线程执行标记整理算法</strong></p><p>将<code>CMS</code>垃圾回收器和<code>Parallel Scavenge</code>的优点融合：</p><ul><li>支持<strong>巨大</strong>的堆空间回收，并拥有<strong>较高</strong>的吞吐量</li><li>支持<strong>多CPU</strong>并行</li><li>允许<strong>用户设定</strong>最大暂停时间</li></ul><p><strong>内存结构</strong>：</p><ul><li>将整个堆划分成多个大小相等的区域，称之为<strong>区Region</strong>，区域<strong>不要求连续</strong></li><li>分为<code>Eden</code>、<code>Survivor</code>、<code>Old</code>区</li></ul><figure><img src="'+L+'" alt="image-20250830171153722" tabindex="0" loading="lazy"><figcaption>image-20250830171153722</figcaption></figure><p>垃圾回收的两种方式：</p><ul><li><p><strong>年轻代回收</strong>（Young GC）</p><ul><li>回收<code>Eden区</code>和<code>Survivor</code>区中不用的对象</li><li>会导致整个用户线程的停止，<strong>即STW</strong></li><li>会记录每次垃圾回收时每个Eden和Survivor区的<strong>平均耗时</strong>，作为下次回收的参考依据</li></ul></li><li><p><strong>混合回收</strong>（Mixed GC）</p><ul><li><p>回收<strong>所有年轻代</strong>和<strong>部分</strong>老年代的对象以及大对象区</p></li><li><p>采用<strong>复制算法</strong></p></li><li><p>分为：<strong>初始标记、并发标记、最终标记、并发清理</strong></p><ul><li>初始标记：标记<code>GC Roots</code>引用的对象为<strong>存活</strong>，多线程并行，<strong>停止用户线程</strong></li><li>并发标记：和用户线程<strong>并行执行</strong>，将第一步中<strong>标记的对象引用的对象</strong>标记为存活，把整个<code>GC Roots</code>引用链的对象标记为存活</li><li>最终标记：标记一些引用改变<strong>漏标</strong>的对象（不管新创建、不再关联的对象）</li><li>并发清理：和用户线程并行，使用的是<strong>复制算法</strong>，且根据<strong>存活率</strong>判断要清理哪部分<code>Region</code></li></ul><figure><img src="'+w+'" alt="image-20250830173009222" tabindex="0" loading="lazy"><figcaption>image-20250830173009222</figcaption></figure></li></ul></li></ul><p><strong>执行流程：​​​​</strong></p><ol><li>新创建的对象放置在Eden区，当G1判断出年轻代区空间不足（有一个阈值），无法分配对象，<strong>会执行Young GC</strong></li><li>标记出<code>Eden</code>和<code>Survivor</code>区域存活的对象</li><li>将<code>Eden</code>和<code>Survivor</code>区域存活的对象<strong>复制到一个新的Survivor区（年龄＋1）</strong>，然后清空这些区域，使用了<strong>复制算法</strong></li><li>当某个存活对象的年龄达到阈值，放入<strong>老年代</strong></li><li>部分对象如果大小超过<strong>Region的一半</strong>，会直接<strong>放入老年代</strong>，这类老年代称为<code>Humongous</code>区（大对象区）。如果对象过大就会横跨多个<code>Region</code></li><li>多次回收之后会出现很多<code>Old</code>老年代区，当堆占有率<strong>达到阈值就会触发混合回收</strong></li></ol><p>####### 垃圾回收器组合</p><ul><li><code>ParNew</code>+<code>CMS</code>（关注暂停时间）</li><li><code>Parallel Scavenge</code>+<code>Parallel Old</code>（关注吞吐量）</li><li><code>G1</code>（需要较大堆且关注暂停时间）</li></ul><h2 id="内存调优" tabindex="-1"><a class="header-anchor" href="#内存调优"><span>内存调优</span></a></h2><ul><li><strong>内存泄露：​​​​</strong>在Java中如果不再使用一个对象，但是该对象依然在<strong>GC Root的引用链</strong>上，这个对象就<strong>不会</strong>被垃圾回收器回收，这种情况称之为<strong>内存泄漏</strong></li><li>内存泄漏绝大多数清空是由<strong>堆内存泄露</strong>引起的</li></ul><figure><img src="'+P+'" alt="image-20250831121409514" tabindex="0" loading="lazy"><figcaption>image-20250831121409514</figcaption></figure><p>可以使用<code>top</code>命令去查看系统的资源</p><ul><li>可以查看系统的负载</li><li><code>RES</code>：常驻内存，进程<strong>实际占用</strong>物理内存的大小</li><li><code>SHR</code>：共享内存，进程占用的<strong>可被其他进程共享</strong>的内存</li></ul><p><strong>堆内存状况</strong>对比：</p><figure><img src="'+R+'" alt="image-20250831122640955" tabindex="0" loading="lazy"><figcaption>image-20250831122640955</figcaption></figure><h3 id="内存泄露的原因" tabindex="-1"><a class="header-anchor" href="#内存泄露的原因"><span>内存泄露的原因</span></a></h3><h4 id="代码中的内存泄漏" tabindex="-1"><a class="header-anchor" href="#代码中的内存泄漏"><span><strong>代码中的内存泄漏</strong></span></a></h4><figure><img src="'+V+`" alt="image-20250831123228657" tabindex="0" loading="lazy"><figcaption>image-20250831123228657</figcaption></figure><ol><li><p><strong>未重写<code>equals()</code>和<code>hashCode()</code>导致内存泄漏</strong></p><ul><li>即使是相同的对象，由于未重写上述两方法，会占用哈希表的大量空间，导致内存泄漏</li></ul></li><li><p><strong>内部类引用外部类</strong></p><ul><li><p><strong>非静态</strong>的内部类默认会持有外部类，只要<strong>使用了这个内部类，外部类就无法被回收</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Outer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;测试&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Inner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Inner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Outer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>匿名内部类对象如果在<strong>非静态方法</strong>中被创建，会持有<strong>无法被回收的调用者对象</strong>，需要改成静态方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Outer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">[] bytes </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;"> byte</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1024</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> newList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建匿名内部类</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">list</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;(){{
            add(&quot;1&quot;);
            add(&quot;2&quot;);
        }}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        return list;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ArrayList</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">objects</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(++count);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // Outer对象不能被回收</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Outer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong><code>ThreadLocal</code>的使用</strong></p><ul><li>new出来的线程对象可以不用调用<code>remove</code>方法移除线程</li><li>使用了<strong>线程池</strong>需要自己调用<code>remove</code>方法</li></ul></li><li><p><strong><code>String</code>的<code>intern</code>方法</strong></p><ul><li>JDK6之前字符串常量池存在永久代中，如果对大量不同的字符串使用<code>intern</code>方法，那么会造成<strong>字符串常量池的内存溢出</strong></li></ul></li><li><p><strong>通过静态字段保存对象</strong></p><ul><li>大量的数据在静态变量中被长期引用，<strong>导致数据不会被释放</strong></li><li>尽量使用懒加载，不再使用静态变量了之后要<strong>把对象删除或者将静态变量置为<code>null</code></strong></li></ul></li></ol><h4 id="并发请求问题" tabindex="-1"><a class="header-anchor" href="#并发请求问题"><span>并发请求问题</span></a></h4><ul><li>实际生产环境中<strong>真实存在的问题</strong></li><li>用户的并发请求量很大，并且处理数据的时间<strong>很长</strong>，导致大量的数据存在于内存中，<strong>超过了内存上限，导致内存溢出</strong></li><li>可以用<code>Jmeter</code>来进行负载测试</li></ul><h3 id="内存快照" tabindex="-1"><a class="header-anchor" href="#内存快照"><span>内存快照</span></a></h3><p>当堆内存溢出时，需要在堆内存溢出时将整个堆内存保存下来，生成<code>Heap Profile</code>：<strong>内存快照</strong></p><ul><li>可以使用虚拟机生成<code>hprof</code>内存快照文件，然后使用<code>MAT</code>打开<code>hprof</code>文件，选择<strong>内存泄漏检测功能</strong></li></ul><h4 id="mat内存泄漏检测原理" tabindex="-1"><a class="header-anchor" href="#mat内存泄漏检测原理"><span>MAT内存泄漏检测原理</span></a></h4><p><strong>支配树</strong></p><ul><li>展示的是对象实例间的支配关系</li><li>在对象引用图中，所有指向对象B的路径都经过对象A，则认为A支配B</li></ul><figure><img src="`+q+'" alt="image-20250901101347721" tabindex="0" loading="lazy"><figcaption>image-20250901101347721</figcaption></figure><p><strong>深堆和浅堆</strong></p><ul><li>支配树中<strong>对象本身占用</strong>的空间称为浅堆</li><li>支配树中对象的<strong>子树</strong>就是所有该对象支配的内容，这些内容组合成了对象的<strong>深堆</strong>，也称为<strong>保留集</strong><ul><li>深堆的大小<strong>表示该对象如果可以被回收，可以释放多大的内存空间</strong></li></ul></li><li>根据支配树从叶子节点向根节点遍历，如果发现深堆的大小超过整个对内存的<strong>一定比例阈值</strong>，就会将其标记为<strong>内存泄漏的嫌疑对象</strong></li></ul><figure><img src="'+I+'" alt="image-20250901101838489" tabindex="0" loading="lazy"><figcaption>image-20250901101838489</figcaption></figure><h2 id="gc调优" tabindex="-1"><a class="header-anchor" href="#gc调优"><span>GC调优</span></a></h2><p><strong>含义：指的是对垃圾回收进行调优</strong></p><p><strong>主要目标：避免由垃圾回收引起程序性能下降</strong></p><p><strong>核心：​​​​</strong></p><ul><li>通用的JVM参数设置</li><li>特定垃圾回收器的JVM参数设置</li><li>解决由频繁的<code>Full GC</code>引起的程序性能问题</li></ul><p><strong>核心指标：​​​​</strong></p><ol><li>吞吐量：垃圾回收吞吐量和业务吞吐量</li><li>延迟：用户发起一个请求到收到响应这<strong>其中经历的时间</strong></li><li>内存使用量：Java应用占用系统内存的最大值</li></ol><p>可以使用<code>jstat</code>工具进行<strong>内存监控</strong></p><h3 id="常见的gc模式" tabindex="-1"><a class="header-anchor" href="#常见的gc模式"><span>常见的GC模式</span></a></h3><ol><li>正常情况：呈现锯齿状，创建对象后内存上升，GC后下降到底部</li></ol><figure><img src="'+O+'" alt="image-20250901104525184" tabindex="0" loading="lazy"><figcaption>image-20250901104525184</figcaption></figure><ol start="2"><li>缓存对象过多：也是呈现锯齿状，处于比较高的位置</li></ol><figure><img src="'+K+'" alt="image-20250901104628452" tabindex="0" loading="lazy"><figcaption>image-20250901104628452</figcaption></figure><ol start="3"><li>内存泄露 ：呈现锯齿状，每次垃圾回收之后下降到的内存位置越来越高</li></ol><figure><img src="'+N+'" alt="image-20250901104756886" tabindex="0" loading="lazy"><figcaption>image-20250901104756886</figcaption></figure><ol start="4"><li>持续的<code>Full GC</code>：在某个时间点产生多次Full GC，CPU使用率飙升，用户请求基本无法处理</li></ol><figure><img src="'+Z+'" alt="image-20250901105053041" tabindex="0" loading="lazy"><figcaption>image-20250901105053041</figcaption></figure><ol start="5"><li>元空间不足导致的<code>Full GC</code>：堆内存太小，会导致持续的<code>Full GC</code></li></ol><figure><img src="'+W+'" alt="image-20250901105235378" tabindex="0" loading="lazy"><figcaption>image-20250901105235378</figcaption></figure><h2 id="graalvm" tabindex="-1"><a class="header-anchor" href="#graalvm"><span>GraalVM</span></a></h2><p>一款<strong>高性能JDK</strong>，可以获得<strong>更低的内存使用率</strong>，<strong>更快的启动速度</strong></p><p>两种模式：</p><ul><li>JIT模式：即时编译模式 <ul><li>一次编写，到处运行</li><li>通过内置的<strong>Graal即时编译器</strong>优化热点代码，生成<strong>更高性能的机器码</strong></li></ul></li><li>AOT模式：提前编译模式 <ul><li>通过源代码为特定平台创建<strong>可执行文件</strong>，即exe文件，不具备<strong>跨平台特性</strong></li><li>这种模式生成的文件称之为<strong>Native Image本地镜像</strong></li></ul></li></ul><h2 id="新一代的gc" tabindex="-1"><a class="header-anchor" href="#新一代的gc"><span>新一代的GC</span></a></h2><p><strong>垃圾回收器的技术演进</strong></p><figure><img src="'+U+'" alt="image-20250902102018076" tabindex="0" loading="lazy"><figcaption>image-20250902102018076</figcaption></figure><p><strong>不同垃圾回收器设计的目标</strong></p><figure><img src="'+H+'" alt="image-20250902102115597" tabindex="0" loading="lazy"><figcaption>image-20250902102115597</figcaption></figure><h3 id="shenandoah" tabindex="-1"><a class="header-anchor" href="#shenandoah"><span>Shenandoah</span></a></h3><ul><li>着眼于减少停顿时间，让用户线程和垃圾回收线程并行处理</li><li>处理大对象的时候<strong>性能非常非常差</strong></li></ul><h3 id="zgc" tabindex="-1"><a class="header-anchor" href="#zgc"><span>ZGC</span></a></h3><ul><li>着眼于减少停顿时间，让用户线程和垃圾回收线程并行处理</li><li>吞吐量不佳</li><li>堆大小对STW时间无影响</li><li>最新版本支持<strong>分代</strong></li></ul><h2 id="栈上的数据存储" tabindex="-1"><a class="header-anchor" href="#栈上的数据存储"><span>栈上的数据存储</span></a></h2><p><strong>八大数据类型</strong></p><figure><img src="'+Y+'" alt="image-20250903112910186" tabindex="0" loading="lazy"><figcaption>image-20250903112910186</figcaption></figure><p><strong>这里的内存占用指的是在堆上或者数组中内存分配的空间大小，在栈上的实现更加负载</strong></p><p>每个局部变量表数组元素空间大小</p><ul><li>32位虚拟机为32位，<strong>4个字节</strong></li><li>64位虚拟机为64位，<strong>8个字节</strong></li></ul><p>不管是几位虚拟机，long和double这种需要8个字节存储的类型都会占<strong>用两个数组元素的位置</strong>(slot槽)</p><p>且操作数栈里的存储大小和局部变量表相同：</p><ul><li>比如long在64位虚拟机是占用16个字节，那么它在操作数栈里也占用16个字节</li></ul><figure><img src="'+X+'" alt="image-20250903113535275" tabindex="0" loading="lazy"><figcaption>image-20250903113535275</figcaption></figure><p>Java8大数据类型在虚拟机中的实现：</p><figure><img src="'+Q+'" alt="image-20250903113953843" tabindex="0" loading="lazy"><figcaption>image-20250903113953843</figcaption></figure><p>注意：</p><ul><li>JVM采用的是<strong>空间换时间</strong>的方案，<strong>在栈上不存储具体的类型</strong>，只根据slot槽进行数据的处理，避免了不同数据类型不同处理方式带来的时间开销</li></ul><h3 id="boolean在栈上的存储方式" tabindex="-1"><a class="header-anchor" href="#boolean在栈上的存储方式"><span>Boolean在栈上的存储方式</span></a></h3><p>在32位或者64位虚拟机里面都是<strong>占用一个槽</strong></p><p>JVM在处理<code>Boolean</code>类型的时候会把其当成<code>Int</code>类型处理</p><ul><li>1代表true</li><li>0代表false</li></ul><p>栈中的数据要保存到堆上或者从堆中加载到栈上时要怎么处理？</p><ol><li>堆中的数据加载到栈上，栈上的空间大于等于堆上的空间，可以直接处理 <ul><li><code>byte</code>、<code>short</code>为有符号，低位复制，高位非负则补0，是负数则补1</li></ul></li><li>栈中的数据保存到堆上，<code>byte</code>、<code>short</code>、<code>char</code>由于堆上的空间较小，需要将高位去掉。<code>boolean</code>只取低位<strong>的最后一位保存</strong></li></ol><h2 id="对象在堆上的存储方式" tabindex="-1"><a class="header-anchor" href="#对象在堆上的存储方式"><span>对象在堆上的存储方式</span></a></h2><p>对象在堆中的内存布局，指的是对象在堆中存放时的各个组成部分</p><ul><li>普通对象 <ul><li>对象头：存放的是基本信息 <ul><li>标记字段（<code>Mark Word</code>）：保存锁、垃圾回收器等特定功能信息，32位4字节，64位8字节</li><li>元数据的指针：指向方法区的<code>InstanceKlass</code>对象</li></ul></li><li>对象数据： <ul><li>会存储当前类每一个字段对应的数据</li><li>内存对齐填充：把当前对象的长度做调整</li></ul></li></ul></li><li>数组对象 <ul><li>对象头：存放的是基本信息 <ul><li>标记字段（<code>Mark Word</code>）：保存锁、垃圾回收器等特定功能信息</li><li>元数据的指针：指向方法区的<code>InstanceKlass</code>对象</li><li>数组长度</li></ul></li></ul></li></ul><figure><img src="'+$+'" alt="image-20250903120801670" tabindex="0" loading="lazy"><figcaption>image-20250903120801670</figcaption></figure><h3 id="标记字段" tabindex="-1"><a class="header-anchor" href="#标记字段"><span>标记字段</span></a></h3><p>在不同的对象状态下存放的内容是不同的</p><ul><li>正常状态 <ul><li><code>Hashcode</code>是每个对象的哈希值</li><li>分代年龄记录对象的年龄，不超过15</li></ul></li><li>偏向锁</li><li>轻量级锁</li><li>重量级锁</li><li>垃圾回收标记</li></ul><figure><img src="'+ss+'" alt="image-20250903120952183" tabindex="0" loading="lazy"><figcaption>image-20250903120952183</figcaption></figure><h3 id="元数据指针" tabindex="-1"><a class="header-anchor" href="#元数据指针"><span>元数据指针</span></a></h3><p>指向方法区中保存的<code>InstanceKlass</code>对象，保存了这个对象的地址</p><ul><li>在32位虚拟机中，这个地址是4个字节</li><li>在64位虚拟机中，这个地址是8个字节</li></ul><p>但是8个字节有点浪费，因此JVM使用了<strong>指针压缩</strong>，将堆中<strong>8个字节的指针压缩成4个字节</strong>，减少内存开销</p><p><strong>指针压缩</strong></p><p><strong>思想：​​​​</strong>将寻址的单位放大，比如原来按1字节寻址，现在可以按8字节寻址</p><figure><img src="'+is+'" alt="image-20250903151239017" tabindex="0" loading="lazy"><figcaption>image-20250903151239017</figcaption></figure><p>问题：</p><ol><li>需要进行<strong>内存对齐</strong>，指的是将对象的内存占用<strong>填充至8字节的倍数</strong></li><li>寻址大小仅能支持<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>35</mn></msup></mrow><annotation encoding="application/x-tex">2^{35}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">35</span></span></span></span></span></span></span></span></span></span></span></span>个字节，32GB。使用了指针压缩之后，变成了4字节存储，1个字节可以指向1个8字节的存储空间，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>3</mn></msup><mo>∗</mo><msup><mn>2</mn><mn>32</mn></msup><mo>=</mo><msup><mn>2</mn><mn>35</mn></msup></mrow><annotation encoding="application/x-tex">2^3 *2^{32}=2^{35}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">32</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">35</span></span></span></span></span></span></span></span></span></span></span></span>，如下图右侧</li></ol><figure><img src="'+ns+'" alt="image-20250903122649561" tabindex="0" loading="lazy"><figcaption>image-20250903122649561</figcaption></figure><h3 id="对象数据" tabindex="-1"><a class="header-anchor" href="#对象数据"><span>对象数据</span></a></h3><p><strong>内存对齐</strong></p><p>会对当前内存进行填充，JVM必须保证<strong>每个对象的字节数是8的倍数</strong></p><p>主要目的：<strong>解决并发情况下CPU缓存失效的问题</strong></p><ul><li>64位JVM的CPU的每一个<strong>缓存行都是8个字节</strong></li><li>如果假设有A、B两个4字节的数据存储到一个缓存行 <ul><li>对A的数据进行修改，此时缓存行要进行数据更新，也就是把A擦除，重新从内存读取新的数据A，但是擦除的最小单位是缓存行，也就是会把没被修改的B也删除</li><li>此时假设有一个线程B去读取B数据，就会引起阻塞</li></ul></li><li>因此把对象进行<strong>内存对齐</strong>后，这个对象是不可能和其它对象共用一个缓存行的</li></ul><p><strong>字段重排列</strong></p><p>要求每个属性的<strong>偏移量Offset（字段地址-起始地址）必须是字段长度的N倍</strong>。比如下图，Student类中的id属性类型为long，那么偏移量就是<strong>8的倍数</strong></p><figure><img src="'+as+'" alt="image-20250903152602772" tabindex="0" loading="lazy"><figcaption>image-20250903152602772</figcaption></figure><p>如果无法通过字段重排列满足<strong>偏移量Offset（字段地址-起始地址）必须是字段长度的N倍</strong>这个条件，JVM就会尝试<strong>内存对齐：在字段之间进行内存填充</strong></p><h2 id="方法调用的原理" tabindex="-1"><a class="header-anchor" href="#方法调用的原理"><span>方法调用的原理</span></a></h2><p><strong>本质上是通过字节码指令的执行，在栈上创建栈帧</strong></p><ul><li>以<code>invoke</code>开头的字节码指令的作用是<strong>执行方法的调用</strong><ul><li><code>invokestatic</code>：调用静态方法</li><li><code>invokespecial</code>：调用对象的<code>private</code>方法、构造方法等</li><li><code>invokevirtual</code>：调用对象的非<code>private</code>方法</li><li><code>invokeinterface</code>：调用接口对象的方法</li></ul></li><li><code>invoke</code>指令执行时，需要找到方法区中的<code>instanceKlass</code>中保存的方法相关的字节码信息</li></ul><p><strong>静态绑定</strong></p><p>只适用于处理静态方法、私有方法或者使用final修饰的方法</p><ol><li>编译期间，<code>invoke</code>指令会携带一个参数符号引用，引用到常量池中的方法定义**（包含了类名、方法名、返回值、参数）**</li><li>方法第一次调用时，这些<strong>符号引用会被替换成内存地址的直接引用</strong></li></ol><p><strong>动态绑定</strong>（可以实现多态）</p><ul><li>对于可能被重写的方法，就需要使用动态绑定</li><li>是基于方法表来实现的，<code>invokevirtual</code>使用了虚方法表(<code>vtable</code>)，<code>invokeinterface</code>使用了接口方法表(<code>itable</code>)</li><li>每个类中都有一个虚方法表，本质上他是一个<strong>数组</strong>，记录了方法的地址 <ul><li>子类方法表中包含父类方法表的<strong>所有方法</strong>，子类如果重写了父类方法，则使用<strong>自己类中方法的地址进行替换</strong></li></ul></li></ul><figure><img src="'+ls+'" alt="image-20250903155034850" tabindex="0" loading="lazy"><figcaption>image-20250903155034850</figcaption></figure><ol><li>产生<code>invokevirtual</code>调用时，先根据<strong>对象头中的元数据指针</strong>找到方法区中的<code>InstanceKlass</code>对象，获得虚方法表</li><li>根据虚方法表找到相应的方法，获得方法的地址，执行方法</li></ol><h2 id="异常捕获的原理" tabindex="-1"><a class="header-anchor" href="#异常捕获的原理"><span>异常捕获的原理</span></a></h2><p>异常捕获机制的实现，需要借助编译时生成的<strong>异常表</strong>（存储在<strong>栈帧</strong>中）</p><p>异常表：存放代码中异常的处理信息</p><ul><li>起始PC：异常捕获生效的起始字节码指令的行数</li><li>结束PC：异常捕获生效的结束字节码指令的行数</li><li>跳转PC：出现异常之后要跳转到的字节码指令的行数</li></ul><figure><img src="'+ts+'" alt="image-20250903160648014" tabindex="0" loading="lazy"><figcaption>image-20250903160648014</figcaption></figure><p><code>finally</code>的实现</p><ol><li><code>finally</code>中的字节码指令会插入到<code>try</code>和<code>catch</code>的代码块中，保证<code>try</code>或者<code>catch</code>执行之后一定会执行finally的代码</li><li>如果抛出的异常在<code>catch</code>代码块覆盖不了，此时也要执行<code>finally</code>中的代码，所以异常表中增加了<strong>两个条目</strong>，覆盖了<code>try</code>和<code>catch</code>两段字节码指令的范围，保证可以执行<code>finally</code>中的代码。最后<strong>需要将无法处理的异常往外抛出</strong></li></ol><h2 id="jit即时编译器" tabindex="-1"><a class="header-anchor" href="#jit即时编译器"><span>JIT即时编译器</span></a></h2><p>字节码指令被JVM解释执行，如果有一些指令执行频率高，<strong>则称之为热点代码</strong>，这些代码被编译成<strong>机器码的同时还会进行优化，并保存在内存中</strong>，将来运行时可以直接读取</p><p>HotSpot中的即时编译器</p><ul><li>C1</li><li>C2</li><li>Graal</li></ul><figure><img src="'+es+'" alt="image-20250904110706975" tabindex="0" loading="lazy"><figcaption>image-20250904110706975</figcaption></figure><ul><li>C1编译效率比C2快，但优化效果不如C2</li><li>C1适合优化一些执行时间较短的代码，C2适合优化服务器端程序中长期执行的代码</li></ul><p><strong>分层编译</strong></p><figure><img src="'+rs+'" alt="image-20250904111010015" tabindex="0" loading="lazy"><figcaption>image-20250904111010015</figcaption></figure><p>C1即时编译器和C2即时编译器都有<strong>独立的线程</strong>进行处理，内部会<strong>保存一个队列存储需要编译的任务</strong></p><figure><img src="'+gs+'" alt="image-20250904111838983" tabindex="0" loading="lazy"><figcaption>image-20250904111838983</figcaption></figure><p><strong>四种工作流程：​​​​</strong></p><ol><li>先由C1执行过程中收集所有运行中的信息，然后等待执行次数触发阈值之后，进入C2即时编f译器进行<strong>更深层次的优化</strong></li></ol><figure><img src="'+ps+'" alt="image-20250904111724970" tabindex="0" loading="lazy"><figcaption>image-20250904111724970</figcaption></figure><ol start="2"><li>方法字节码执行数目过少，先收集信息，由JVM判断出来C1和C2优化性能差不多，转为不收集信息，由C1进行优化</li></ol><figure><img src="'+os+'" alt="image-20250904111740070" tabindex="0" loading="lazy"><figcaption>image-20250904111740070</figcaption></figure><ol start="3"><li>C1线程都在忙碌，由C2进行优化</li></ol><figure><img src="'+hs+'" alt="image-20250904111646895" tabindex="0" loading="lazy"><figcaption>image-20250904111646895</figcaption></figure><ol start="4"><li>C2线程忙碌，先由2层C1收集一些信息，再交由3层C1处理，最后C2线程不忙碌了再交由C2进行处理</li></ol><figure><img src="'+ds+'" alt="image-20250904111702177" tabindex="0" loading="lazy"><figcaption>image-20250904111702177</figcaption></figure><h3 id="方法内联" tabindex="-1"><a class="header-anchor" href="#方法内联"><span>方法内联</span></a></h3><p>方法体中的字节码指令直接<strong>复制到调用方的字节码指令</strong>中，<strong>节省了创建栈帧的开销</strong></p><p><strong>条件限制：​​​​</strong></p><ol><li>方法编译后的字节码指令&lt;35字节</li><li>方法编译后的字节码指令&lt;325字节，并且是<strong>热方法（热点代码）</strong></li><li>方法编译后的字节码指令不能大于1000字节</li><li>一个接口的实现必须小于3个</li></ol><h3 id="逃逸分析" tabindex="-1"><a class="header-anchor" href="#逃逸分析"><span>逃逸分析</span></a></h3><p>如果JIT发现在<strong>方法内创建的对象不会被外部引用</strong>，就可以采用<strong>锁消除、标量替换</strong>等方式进行优化</p><p><strong>锁消除</strong></p><p>如果对象不会被逃逸出去，那么对象就<strong>不存在并发访问问题</strong>，可以把<code>synchronized</code>去掉</p><p><strong>标量替换</strong></p><ul><li>对性能优化较大的方式</li><li>如果方法中的对象不会逃逸，<strong>其中的标量（对象中的基本数据类型）就会直接在栈上进行分配</strong><ul><li>不在堆上创建对象，把标量当成局部变量放在<strong>栈帧里进行处理</strong></li></ul></li></ul><h2 id="g1垃圾回收器" tabindex="-1"><a class="header-anchor" href="#g1垃圾回收器"><span>G1垃圾回收器</span></a></h2><p>年轻代回收只扫描年轻代对象（<code>Eden</code>+<code>Survivor</code>），沿着GC Root引用链可以很轻松查找哪些对象不能被回收</p><figure><img src="'+cs+'" alt="image-20250904114208683" tabindex="0" loading="lazy"><figcaption>image-20250904114208683</figcaption></figure><h3 id="年轻代回收" tabindex="-1"><a class="header-anchor" href="#年轻代回收"><span>年轻代回收</span></a></h3><p>整个过程是<strong>STW</strong>的</p><p>是否回收通过<code>GC Root</code>引用链判断是有<strong>局限性</strong>的，如果<strong>年轻代的对象被老年代引用</strong>，年轻代对象如何回收？</p><figure><img src="'+ks+'" alt="image-20250906232331562" tabindex="0" loading="lazy"><figcaption>image-20250906232331562</figcaption></figure><p><strong>方案一：​​​​</strong>从<code>GC Root</code>对象开始扫描所有对象，在其引用链上的对象就标记为存活</p><ul><li><strong>缺点：​​​​</strong>如果引用链长，会增加大量的对象扫描，增加扫描时间，导致执行效率低</li></ul><figure><img src="'+us+'" alt="image-20250906232349688" tabindex="0" loading="lazy"><figcaption>image-20250906232349688</figcaption></figure><p><strong>方案二：​​​​</strong>维护一个详细的表，记录哪个对象被老年代引用</p><ul><li><strong>缺点：​​​​</strong>如果对象太多的话会<strong>占用内存空间</strong>，会存在<strong>错标情况</strong></li></ul><figure><img src="'+ms+'" alt="image-20250906232407451" tabindex="0" loading="lazy"><figcaption>image-20250906232407451</figcaption></figure><p><strong>优化后</strong></p><ul><li>将引用详情表转变为<strong>记忆集</strong>，最后进行引用链查找的时候把<strong>每个区域的每个块（卡页）里面存放的对象</strong>加入成<code>GC Root</code>对象，将他们引用链上的对象标记为存活</li><li>记忆集里面存储的是<strong>区域和卡页编号的映射</strong><ul><li>不会记录<strong>新生代到新生代的引用</strong></li></ul></li></ul><figure><img src="'+As+'" alt="image-20250906232601037" tabindex="0" loading="lazy"><figcaption>image-20250906232601037</figcaption></figure><h4 id="卡表-card-table" tabindex="-1"><a class="header-anchor" href="#卡表-card-table"><span>卡表（Card Table）</span></a></h4><ul><li>每一个区域都有自己的卡表，其实是一个<strong>字节数组</strong></li><li>卡表会将整个堆内存均分成512字节的<strong>卡页</strong><ul><li>如果这个卡页出现<strong>跨代引用</strong>，这个卡页对应的卡表上会将字节内容进行修改</li><li>字节内容为0的<strong>卡页</strong>称为<strong>脏卡</strong></li></ul></li><li>生成记忆集可以通过<strong>遍历卡表来实现</strong></li></ul><figure><img src="'+ys+'" alt="image-20250906233007584" tabindex="0" loading="lazy"><figcaption>image-20250906233007584</figcaption></figure><h4 id="写屏障-write-barrier" tabindex="-1"><a class="header-anchor" href="#写屏障-write-barrier"><span>写屏障（Write Barrier）</span></a></h4><p>JVM使用写屏障技术，在执行引用关系确立，如<code>a.f = f</code>时，可以在代码前和代码后加入一段指令，从而<strong>维护卡表</strong></p><ul><li>声明老年代引用年轻代对象后，就<strong>更新卡表</strong></li><li><strong>写前屏障</strong>会记录旧的引用值，如<code>a.f</code>里面的对象</li><li><strong>写后屏障</strong>会记录新的引用值，如<code>f</code></li></ul><figure><img src="'+bs+'" alt="image-20250906233509833" tabindex="0" loading="lazy"><figcaption>image-20250906233509833</figcaption></figure><h4 id="记忆集的生成流程" tabindex="-1"><a class="header-anchor" href="#记忆集的生成流程"><span>记忆集的生成流程</span></a></h4><ol><li>通过写屏障获得引用变更的信息</li><li>将引用关系记录到卡表中，并记录到一个脏卡队列中</li><li>JVW中会由<code>Refinement</code>线程定期从脏卡队列中获取数据，生成记忆集。<strong>不直接写入记忆集的原因是避免过多线程并发访问记忆集，导致线程安全问题</strong></li></ol><figure><img src="'+Bs+'" alt="image-20250906234122459" tabindex="0" loading="lazy"><figcaption>image-20250906234122459</figcaption></figure><h4 id="年轻代回收流程" tabindex="-1"><a class="header-anchor" href="#年轻代回收流程"><span>年轻代回收流程</span></a></h4><ol><li>Root扫描，将所有的静态变量、局部变量扫描出来</li><li>处理脏卡队列中没有处理完的信息，<strong>更新记忆集的数据</strong></li><li>标记存活对象，记忆集中的对象会加入到<code>GC Root</code>对象集合中，在<code>GC Root</code>引用链上的对象会被标记为存活</li><li>根据设定的最大停顿时间，选择本次收集的区域</li><li>使用复制算法进行垃圾回收</li><li>处理软、弱、虚、终结器引用以及JNI中的弱引用</li></ol><h3 id="混合回收" tabindex="-1"><a class="header-anchor" href="#混合回收"><span>混合回收</span></a></h3><p><strong>在<code>Young GC</code>后或者大对象分配之后</strong>会检查当前内存阈值是否达到上限</p><h4 id="三色标记法" tabindex="-1"><a class="header-anchor" href="#三色标记法"><span>三色标记法</span></a></h4><p>采用三色标记法进行初始的标记</p><ul><li>黑色：当前对象在<code>GC Root</code>引用链上，同时<strong>它引用的其他对象已经标记完成</strong>，为1</li><li>白色：<strong>不在</strong><code>GC Root</code>引用链上，为0</li><li>灰色：当前对象在<code>GC Root</code>引用链上，它引用的其它对象<strong>还未标记完成</strong>，会被存储到一个队列进行处理</li></ul><figure><img src="'+fs+'" alt="image-20250906235256136" tabindex="0" loading="lazy"><figcaption>image-20250906235256136</figcaption></figure><p>黑色与白色是<strong>使用位图（bitmap）来实现的</strong></p><ul><li>每8个字节使用1个bit来标识内容 <ul><li>对象在堆中存储的字节会被对齐成8的倍数</li></ul></li><li>对象超过8个字节仅仅使用第1个bit处理</li></ul><figure><img src="'+vs+'" alt="image-20250906235613653" tabindex="0" loading="lazy"><figcaption>image-20250906235613653</figcaption></figure><h4 id="satb" tabindex="-1"><a class="header-anchor" href="#satb"><span>SATB</span></a></h4><p>进行初始标记后进入并发标记，此阶段和用户线程并行，处理方式同上，对颜色进行进一步标记，但是会有个严重问题</p><ul><li><p>此阶段和用户线程并行，如果用户线程修改对象的引用关系，就会出现错标</p><ul><li><p>这个案例中正常情况下，B和C都会被标记成黑色，但是在BC标记之前，用户线程执行了<code>B.c = null</code>，将B到C的引用去除了</p><figure><img src="'+Cs+'" alt="image-20250907000221166" tabindex="0" loading="lazy"><figcaption>image-20250907000221166</figcaption></figure></li><li><p>同时执行了<code>A.c= = c</code>，添加了A到C的引用，导致JVM不会处理C的引用</p><figure><img src="'+Fs+`" alt="image-20250907000236931" tabindex="0" loading="lazy"><figcaption>image-20250907000236931</figcaption></figure></li></ul></li></ul><p>为了解决这个问题，使用了SATB技术</p><ol><li>标记开始时创建一个快照，记录当前所有对象，<strong>标记过程中新生成的对象直接标记为黑色</strong></li><li>采用<strong>前置写屏障技术</strong>，在引用赋值前比如<code>B.c = null</code>前，将之前引用的<strong>c对象放入SATB待处理队列中</strong></li><li>然后进入<strong>最终标记</strong>，用来处理SATB相关的对象标记，会将<strong>所有线程的SATB队列中剩余的数据汇总到总的SATB队列中</strong><ul><li>总的SATB队列中的对象<strong>按照存活来进行处理</strong></li></ul></li></ol><p>SATB的缺点是本轮清理<strong>可能会将不存活的对象标记为存活对象</strong>，只能等到下一轮来清理掉</p><h4 id="转移" tabindex="-1"><a class="header-anchor" href="#转移"><span>转移</span></a></h4><ol><li>根据最终标记结果和停顿时间，选择转移效率最高的几个区域</li><li>先转移<code>GC Root</code>直接引用的对象，再转移其他对象</li><li>回收老的区域，如果<strong>外部区域对象有引用转移对象</strong>，需要把引用关系重新确立</li></ol><h4 id="混合回收的步骤" tabindex="-1"><a class="header-anchor" href="#混合回收的步骤"><span>混合回收的步骤</span></a></h4><ol><li><strong>初始标记</strong>，<strong>STW</strong>，采用三色标记法标记从<code>GC Root</code>可<strong>直达</strong>的对象</li><li><strong>并发标记</strong>，GC线程和用户线程并发执行，对存活对象进行标记</li><li><strong>最终标记</strong>，<strong>STW</strong>，处理<code>SATB</code>相关的对象标记</li><li><strong>清理</strong>，<strong>STW</strong>，如果区域中无任何对象就直接清理</li><li><strong>转移</strong>，将存活对象复制到别的区域</li></ol><h2 id="zgc-1" tabindex="-1"><a class="header-anchor" href="#zgc-1"><span>ZGC</span></a></h2><p><strong>转移阶段是并发的</strong>，g1的转移阶段是不让用户线程执行的</p><h3 id="读屏障-load-barrier" tabindex="-1"><a class="header-anchor" href="#读屏障-load-barrier"><span>读屏障（Load Barrier）</span></a></h3><p><strong>在转移阶段实现转移后对象的获取</strong></p><ul><li>如果用户线程尝试获取一个对象引用，<strong>并且这个对象已经进行</strong>，会采用读后屏障指令，<strong>把对象引用指向转移后的对象</strong></li><li><strong>例子：​​​​</strong></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">F</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> f </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> obj</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">f</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">count</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+xs+'" alt="image-20250907102050286" tabindex="0" loading="lazy"><figcaption>image-20250907102050286</figcaption></figure><h3 id="着色指针" tabindex="-1"><a class="header-anchor" href="#着色指针"><span>着色指针</span></a></h3><p>使用着色指针<strong>存储对象的状态信息</strong></p><ul><li><p>使用对象地址的<strong>高位去存储状态信息</strong></p><ul><li>最低的44位用来表示对象地址，可以表示16TB的内存空间</li><li>中间4位是颜色位，只能放0或1 <ul><li>终结位：标记对象是否注册了终结器，标记了的话这个对象只能通过终结器访问</li><li>重映射位（Remap）：标记对象是否已完成引用更新</li><li>Marked0和Marked1：标记对象是否存活**（1为存活）<strong>，但这两个标志位是</strong>交替标记**的，比如Marked0是当前轮，Marked1是上一轮</li></ul></li></ul><figure><img src="'+Es+'" alt="image-20250907102229127" tabindex="0" loading="lazy"><figcaption>image-20250907102229127</figcaption></figure></li></ul><h3 id="内存划分" tabindex="-1"><a class="header-anchor" href="#内存划分"><span>内存划分</span></a></h3><p>堆内存会被划分成很多个区域，这些区域被称为Zpage</p><ul><li>小区域：只能保存256KB内的对象</li><li>中区域：32M，保存256KB-4M的对象</li><li>大区域：只保存一个大于4M的对象</li></ul><h3 id="zgc工作流程" tabindex="-1"><a class="header-anchor" href="#zgc工作流程"><span>ZGC工作流程</span></a></h3><ul><li><strong>初始标记阶段：​​​​</strong>标记<code>GC Root</code>直接引用的对象</li><li><strong>并发标记阶段：​​​​</strong>用户线程通过读屏障去判断指针是不是红色，也可以帮忙标。会遍历所有对象，</li><li><strong>并发处理阶段：​​​​</strong>选择需要转移的Zpage，创建转移表用于<strong>记录转移前对象和转移后对象的地址</strong></li><li><strong>转移：​​​​</strong>先将<code>GC Root</code>直接关联的对象转移到新的Zpage中，再把剩余对象转移到新的Zpage中，<strong>将两个对象的地址记入转移映射表</strong><ul><li>将不转移对象的Remapped指针的值设置成1，<strong>说明这个对象已经完成转移的处理</strong></li></ul></li><li>这一轮的垃圾回收结束，但其实并没有完成所有<strong>指针的重映射工作</strong>，会放到下一阶段来进行 <ul><li>重映射工作通过转移映射表来实现，旧的映射会指向旧对象，然后<strong>根据转移映射表指向新对象</strong></li><li>如图中的2，5&#39;</li></ul></li></ul><figure><img src="'+Ds+'" alt="image-20250907104350757" tabindex="0" loading="lazy"><figcaption>image-20250907104350757</figcaption></figure><h2 id="shenandoagc" tabindex="-1"><a class="header-anchor" href="#shenandoagc"><span>ShenandoaGC</span></a></h2><p>通过修改对象头设计来完成并发转移</p><ul><li>会在对象头开启一个8字节空间作为<strong>前向指针</strong></li></ul><figure><img src="'+zs+'" alt="image-20250907105411214" tabindex="0" loading="lazy"><figcaption>image-20250907105411214</figcaption></figure><ul><li>指向转移之后的对象，如果没有就指向自己</li></ul><figure><img src="'+_s+'" alt="image-20250907105423998" tabindex="0" loading="lazy"><figcaption>image-20250907105423998</figcaption></figure><p><strong>2.0版本优化了前向指针的位置，仅在转移阶段将其放入Mark Word中</strong></p><figure><img src="'+js+'" alt="image-20250907105940188" tabindex="0" loading="lazy"><figcaption>image-20250907105940188</figcaption></figure><h3 id="读前屏障" tabindex="-1"><a class="header-anchor" href="#读前屏障"><span>读前屏障</span></a></h3><p>使用读前屏障在用户线程进行读取的时候判断前向指针有没有指向别的对象，如果指向了转移后的对象，就去<strong>操作转移后的对象</strong></p><h3 id="写入屏障" tabindex="-1"><a class="header-anchor" href="#写入屏障"><span>写入屏障</span></a></h3><p>写入数据会使用写前屏障，判断对象头的GC状态，根据GC状态的值来判断当前处于垃圾回收的哪个阶段</p><ul><li>如果用户线程和GC线程都尝试把复制对象写入前向指针，会使用CAS实现</li></ul><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题"><span><strong>常见问题</strong></span></a></h2><p><strong>类加载器的作用是什么</strong></p><p>类加载器负责把类的字节码文件用二进制方式读取转换成byte，然后调用虚拟机底层的方法把这部分信息存入堆和方法区</p><p><strong>有几种类加载器</strong></p><ul><li>启动类加载器</li><li>扩展类加载器</li><li>应用程序类加载器</li><li>自定义类加载器</li></ul><p><strong>什么是双亲委派机制</strong></p><p>每个java对象的类加载器保存了一个父类加载器，自底向上是否查找是否加载过，再由顶向下加载，确保类只加载一次并且核心类能够被加载</p><p><strong>如何打破双亲委派机制</strong></p><ol><li>重写<code>loadClass</code>方法</li><li>使用SPI机制和线程上下文类加载器</li></ol><p><strong>Java内存分为哪几部分</strong></p><p><strong>Java内存中哪些部分会溢出</strong></p><p><strong>JDK7和8中的内存结构上的区别是什么</strong></p>',490)])])}const Ls=i(Ss,[["render",Js]]),ws=JSON.parse('{"path":"/backend/JVM.html","title":"JVM","lang":"zh-CN","frontmatter":{"title":"JVM","description":"JAVA虚拟机的一些笔记","author":"xbZhong","isOriginal":true,"article":true,"category":"backend","timeline":true,"icon":"eos-icons:virtual-guest","date":"2025-09-08T00:00:00.000Z","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM\\",\\"image\\":[\\"https://xbzhong.cn/screenshot/backend/image-20250827103136127.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250827121529235.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250827165053890.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828104007723.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828145345501.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828114310579.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828115521211.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828120952341.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828142008540.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829110329036.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828152526384.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828155651944.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828160443690.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828163247278.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828181256837.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828182043377.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828190129331.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250828184709777.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829130545212.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829140619318.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829141616665.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829160259912.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829160328473.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829160016236.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250829171806375.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830162724929.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830163035897.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830163831847.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830164027933.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830165211992.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830165359547.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830171153722.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250830173009222.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250831121409514.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250831122640955.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250831123228657.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901101347721.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901101838489.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901104525184.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901104628452.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901104756886.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901105053041.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250901105235378.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250902102018076.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250902102115597.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903112910186.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903113535275.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903113953843.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903120801670.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903120952183.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903151239017.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903122649561.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903152602772.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903155034850.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250903160648014.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904110706975.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904111010015.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904111838983.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904111724970.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904111740070.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904111646895.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904111702177.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250904114208683.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906232331562.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906232349688.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906232407451.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906232601037.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906233007584.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906233509833.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906234122459.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906235256136.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250906235613653.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907000221166.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907000236931.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907102050286.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907102229127.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907104350757.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907105411214.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907105423998.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20250907105940188.png\\"],\\"datePublished\\":\\"2025-09-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-11T10:07:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xbZhong\\"}]}"],["meta",{"property":"og:url","content":"https://xbzhong.cn/backend/JVM.html"}],["meta",{"property":"og:site_name","content":"阿b的博客"}],["meta",{"property":"og:title","content":"JVM"}],["meta",{"property":"og:description","content":"JAVA虚拟机的一些笔记"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xbzhong.cn/screenshot/backend/image-20250827103136127.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-11T10:07:48.000Z"}],["meta",{"property":"article:author","content":"xbZhong"}],["meta",{"property":"article:published_time","content":"2025-09-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-11T10:07:48.000Z"}]]},"git":{"createdTime":1760100316000,"updatedTime":1760177268000,"contributors":[{"name":"BO","username":"BO","email":"2396768163@qq.com","commits":3,"url":"https://github.com/BO"}]},"readingTime":{"minutes":51.55,"words":15464},"filePathRelative":"backend/JVM.md","excerpt":"<p><strong>java编译流程</strong></p>\\n<ul>\\n<li>由<code>javac</code> 把<code>.java</code> 文件编译成<code>.class</code>文件</li>\\n<li>再由JVM把<code>.class</code>文件编译成二进制文件给操作系统执行</li>\\n<li>因此它十分适合跨操作系统开发</li>\\n</ul>\\n<h2>JVM</h2>\\n<p><strong>就是java虚拟机</strong></p>\\n<ul>\\n<li><strong>即时编译（JIT）：​​​​</strong>会监控代码执行频率，找出热点代码，把热点代码编译成机器码后存储在内存</li>\\n<li><strong>内存管理：​​​​</strong>利用JVM的垃圾回收机制自动回收不用的对象</li>\\n</ul>"}');export{Ls as comp,ws as data};
