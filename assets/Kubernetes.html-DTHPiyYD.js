import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,e as o,o as r}from"./app-CVFbIEIR.js";const i="/screenshot/backend/image-20251017150052951.png",s="/screenshot/backend/image-20251018161042945.png",a="/screenshot/backend/image-20251018160307336.png",g="/screenshot/backend/image-20251018153922491.png",l="/screenshot/backend/image-20251018151215574.png",p="/screenshot/backend/image-20251018151814388.png",c="/screenshot/backend/image-20251018152403502.png",d="/screenshot/backend/image-20251018153151400.png",h={};function u(m,e){return r(),t("div",null,[...e[0]||(e[0]=[o('<p><a href="https://kubernetes.io/zh-cn/docs/home/" target="_blank" rel="noopener noreferrer">Kubernetes 文档 | Kubernetes</a></p><h2 id="概念" tabindex="-1"><a class="header-anchor" href="#概念"><span>概念</span></a></h2><p>Kubernetes是一个容器编排框架，提供了一个<strong>可弹性运行分布式系统</strong>的框架</p><p>它具有以下功能：</p><ul><li><strong>服务发现和负载均衡</strong></li><li><strong>存储编排</strong></li><li><strong>自动部署和回滚</strong></li><li><strong>自我修复</strong></li><li><strong>等等......</strong></li></ul><h3 id="架构" tabindex="-1"><a class="header-anchor" href="#架构"><span>架构</span></a></h3><p><strong>Kubernetes架构</strong></p><p>典型的<strong>MASTER-WORKER</strong>架构</p><figure><img src="'+i+'" alt="image-20251017150052951" tabindex="0" loading="lazy"><figcaption>image-20251017150052951</figcaption></figure><figure><img src="'+s+'" alt="image-20251018161042945" tabindex="0" loading="lazy"><figcaption>image-20251018161042945</figcaption></figure><ul><li><strong>控制平面</strong><ul><li><code>kube-apiserver</code>：负责<strong>处理接受外来请求</strong>的工作，是控制平面的前端</li><li><code>etcd</code>：<strong>分布式键值存储</strong>，存储集群状态数据</li><li><code>kube-scheduler</code>：负责监视<strong>新创建的、未指定运行节点（node）的Pods</strong>，并选择节点让Pod在上面运行</li><li><code>kube-controller-manager</code>：运行控制器进程，<strong>多个控制器会在同一个进程运行</strong><ul><li>监测集群中<strong>各种资源对象</strong>的状态，并根据状态做出响应</li><li>有许多不同类型，在这不进行赘述</li></ul></li></ul></li><li><strong>工作节点</strong><ul><li><code>kubelet</code>：会在集群中每个节点上运行，<strong>保证容器（containers）都运行在Pod中</strong><ul><li>会定期从<code>apiserver</code>接收新的或者修改后的pod规范，并将pod的工作信息等汇报给<code>apiserver</code></li></ul></li><li><code>kube-proxy</code>：网络代理，实现<strong>服务间访问和负载均衡</strong></li><li><code>Container Runtime</code>：负责管理 Kubernetes 环境中容器的执行和生命周期</li></ul></li></ul><figure><img src="'+a+'" alt="image-20251018160307336" tabindex="0" loading="lazy"><figcaption>image-20251018160307336</figcaption></figure><h4 id="常见资源对象" tabindex="-1"><a class="header-anchor" href="#常见资源对象"><span>常见资源对象</span></a></h4><figure><img src="'+g+'" alt="image-20251018153922491" tabindex="0" loading="lazy"><figcaption>image-20251018153922491</figcaption></figure><h4 id="node-节点" tabindex="-1"><a class="header-anchor" href="#node-节点"><span>Node（节点）</span></a></h4><blockquote><p>Node是K8s的工作单元主机，Pod是它上面运行的工作负载，控制面调度Pod到Node上运行</p></blockquote><p><strong>概念</strong></p><ul><li><p>k8s集群中的工作机器，可以是<strong>物理机或虚拟机</strong></p></li><li><p>提供计算资源来运行<code>pod</code></p></li><li><p>由控制面进行<strong>调度和管理</strong></p></li><li><p>节点上的<a href="https://kubernetes.io/zh-cn/docs/concepts/architecture/#node-components" target="_blank" rel="noopener noreferrer">组件</a>包括<code>kubelet</code>、 容器运行时以及<code>kube-proxy</code></p></li><li><p>会为每个Pod创建<strong>一个IP地址</strong>（集群内部IP地址），实现Pod之间的通信</p></li></ul><figure><img src="'+l+'" alt="image-20251018151215574" tabindex="0" loading="lazy"><figcaption>image-20251018151215574</figcaption></figure><p><strong>说明</strong></p><ul><li>节点名称在集群中<strong>唯一</strong></li><li>当 <code>kubelet</code> 启动参数中 <code>--register-node=true</code> 时，节点会<strong>自动向 API Server 注册</strong></li><li>节点的状态包括以下内容： <ul><li><strong>地址</strong>：节点的 IP、主机名等</li><li><strong>状况</strong>：表示节点是否健康、是否可调度</li><li><strong>容量与可分配</strong>：节点可提供与已分配的资源</li><li><strong>信息</strong>：节点的操作系统、内核、Kubelet 版本等</li></ul></li><li>节点会通过<strong>周期性心跳</strong>上报状态，控制面据此判断节点是否“可用</li></ul><h4 id="pod" tabindex="-1"><a class="header-anchor" href="#pod"><span>Pod</span></a></h4><ul><li>k8s中的最小部署单元，但不是一个稳定的实体，容易<strong>被创建和销毁</strong><ul><li>发生故障的时候k8s会销毁pod，并创建一个新的pod进行替代</li></ul></li><li>一个Pod里可以有一个或多个容器，<strong>共享网络和卷</strong></li><li>使用多个容器应当是这多个容器<strong>紧密关联</strong>，否则应该拆分为多个Pod部署</li></ul><h4 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h4><p><strong>为Pod提供稳定的访问入口和服务发现</strong></p><ul><li>定义服务访问规则和抽象，实际由<code>kube-proxy</code>实现转发</li></ul><figure><img src="'+p+'" alt="image-20251018151814388" tabindex="0" loading="lazy"><figcaption>image-20251018151814388</figcaption></figure><ul><li>可以提供服务发现，实现负载均衡，类似<strong>网关</strong></li><li>可以为<strong>内部服务</strong>和<strong>外部服务</strong>提供访问入口 <ul><li>使用节点的IP地址和端口号映射到<code>Service</code>的IP地址和端口号是实现<strong>外部服务</strong></li></ul></li></ul><h4 id="ingress" tabindex="-1"><a class="header-anchor" href="#ingress"><span>Ingress</span></a></h4><p><strong>集群外部访问集群内服务的统一入口</strong></p><figure><img src="'+c+'" alt="image-20251018152403502" tabindex="0" loading="lazy"><figcaption>image-20251018152403502</figcaption></figure><ul><li><p>可以根据<strong>请求的域名和路径</strong>转发到不同的服务上</p></li><li><p>可配置不同的转发规则</p></li><li><p>可实现负载均衡，配置SSL证书</p></li></ul><h4 id="configmap" tabindex="-1"><a class="header-anchor" href="#configmap"><span>ConfigMap</span></a></h4><p>存储<strong>非敏感配置数据</strong>的资源对象，用于将配置从容器镜像中分离出来，使Pod可以动态获取配置</p><ul><li><p>存储明文信息，不建议存储敏感信息</p></li><li><p>使<strong>应用程序和配置解耦</strong>，配置变更时不用重新构建镜像</p></li><li><p>方便Pod进行配置的动态获取</p></li></ul><h4 id="secret" tabindex="-1"><a class="header-anchor" href="#secret"><span>Secret</span></a></h4><p>存储<strong>敏感配置数据</strong>的资源对象</p><ul><li>默认使用<strong>base64编码</strong>存储，不直接明文展示</li><li>并不是一种加密方式，需要配合k8s其他组件实提高安全性</li></ul><h4 id="volumes" tabindex="-1"><a class="header-anchor" href="#volumes"><span>Volumes</span></a></h4><p><strong>实现Pod数据的持久化存储</strong></p><figure><img src="'+d+'" alt="image-20251018153151400" tabindex="0" loading="lazy"><figcaption>image-20251018153151400</figcaption></figure><ul><li>可以实现数据持久化，保存应用运行产生的文件，防止文件丢失</li><li>可以实现<strong>容器间共享数据</strong></li><li>可直接挂载<strong>宿主机目录</strong>进行存储，也可以绑定<strong>外部远程存储</strong></li></ul><h4 id="deployment" tabindex="-1"><a class="header-anchor" href="#deployment"><span>Deployment</span></a></h4><p>负责<strong>管理和控制 Pod 的运行与副本数量</strong></p><ul><li><p>适合管理<strong>无状态应用</strong></p></li><li><p>可自动维持期望副本数，执行<strong>Pod的自动重建</strong></p></li><li><p>支持版本回滚、更新</p></li></ul><h4 id="statefulset" tabindex="-1"><a class="header-anchor" href="#statefulset"><span>StatefulSet</span></a></h4><p>用于<strong>部署和管理有状态应用</strong>的控制器</p><ul><li>适合管理有状态应用</li><li>可以保证<strong>Pod的唯一标识、启动顺序和停止顺序受控、稳定的存储卷</strong></li></ul><h2 id="minikube" tabindex="-1"><a class="header-anchor" href="#minikube"><span>Minikube</span></a></h2><p>迷你版的<code>Kubernetes</code>，可以在本地部署<strong>一个完整的单节点Kubernetes集群</strong></p>',50)])])}const k=n(h,[["render",u]]),x=JSON.parse('{"path":"/backend/Kubernetes.html","title":"Kubernetes","lang":"zh-CN","frontmatter":{"title":"Kubernetes","author":"xbZhong","isOriginal":true,"article":true,"category":"backend","timeline":true,"icon":"devicon:kubernetes","date":"2025-10-18T00:00:00.000Z","description":"Kubernetes 文档 | Kubernetes 概念 Kubernetes是一个容器编排框架，提供了一个可弹性运行分布式系统的框架 它具有以下功能： 服务发现和负载均衡 存储编排 自动部署和回滚 自我修复 等等...... 架构 Kubernetes架构 典型的MASTER-WORKER架构 image-20251017150052951imag...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kubernetes\\",\\"image\\":[\\"https://xbzhong.cn/screenshot/backend/image-20251017150052951.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018161042945.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018160307336.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018153922491.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018151215574.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018151814388.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018152403502.png\\",\\"https://xbzhong.cn/screenshot/backend/image-20251018153151400.png\\"],\\"datePublished\\":\\"2025-10-18T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-18T08:42:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xbZhong\\"}]}"],["meta",{"property":"og:url","content":"https://xbzhong.cn/backend/Kubernetes.html"}],["meta",{"property":"og:site_name","content":"阿b的博客"}],["meta",{"property":"og:title","content":"Kubernetes"}],["meta",{"property":"og:description","content":"Kubernetes 文档 | Kubernetes 概念 Kubernetes是一个容器编排框架，提供了一个可弹性运行分布式系统的框架 它具有以下功能： 服务发现和负载均衡 存储编排 自动部署和回滚 自我修复 等等...... 架构 Kubernetes架构 典型的MASTER-WORKER架构 image-20251017150052951imag..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xbzhong.cn/screenshot/backend/image-20251017150052951.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T08:42:06.000Z"}],["meta",{"property":"article:author","content":"xbZhong"}],["meta",{"property":"article:published_time","content":"2025-10-18T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T08:42:06.000Z"}]]},"git":{"createdTime":1760776926000,"updatedTime":1760776926000,"contributors":[{"name":"BO","username":"BO","email":"2396768163@qq.com","commits":1,"url":"https://github.com/BO"}]},"readingTime":{"minutes":4.14,"words":1243},"filePathRelative":"backend/Kubernetes.md","excerpt":"<p><a href=\\"https://kubernetes.io/zh-cn/docs/home/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Kubernetes 文档 | Kubernetes</a></p>\\n<h2>概念</h2>\\n<p>Kubernetes是一个容器编排框架，提供了一个<strong>可弹性运行分布式系统</strong>的框架</p>\\n<p>它具有以下功能：</p>\\n<ul>\\n<li><strong>服务发现和负载均衡</strong></li>\\n<li><strong>存储编排</strong></li>\\n<li><strong>自动部署和回滚</strong></li>\\n<li><strong>自我修复</strong></li>\\n<li><strong>等等......</strong></li>\\n</ul>","autoDesc":true}');export{k as comp,x as data};
