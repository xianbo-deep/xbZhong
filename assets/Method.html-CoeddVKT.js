import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as o,o as r}from"./app-VtUcJp9I.js";const a="/screenshot/dl/image-20250703160937958.png",i="/screenshot/dl/image-20250703160948495.png",s={};function g(p,t){return r(),n("div",null,[...t[0]||(t[0]=[o('<p><strong>模型压缩三部分优化</strong>：</p><ol><li>减少内存密集的范围量</li><li>提高获取模型参数时间</li><li>加速模型推理时间</li></ol><h2 id="模型剪枝-pruning" tabindex="-1"><a class="header-anchor" href="#模型剪枝-pruning"><span>模型剪枝（Pruning）</span></a></h2><p>研究模型权重的冗余，尝试<strong>删除/修改</strong>冗余或者非关键权重，会<strong>改变模型参数量</strong></p><figure><img src="'+a+'" alt="image-20250703160937958" tabindex="0" loading="lazy"><figcaption>image-20250703160937958</figcaption></figure><h3 id="剪枝算法分类" tabindex="-1"><a class="header-anchor" href="#剪枝算法分类"><span>剪枝算法分类</span></a></h3><ul><li><strong>非结构化剪枝</strong>：剪枝算法简单，模型压缩比高，<strong>权重矩阵会稀疏</strong></li><li><strong>结构化剪枝</strong>：在<strong>channel和layer</strong>上进行剪枝，保留原始卷积结构，但算法相对复杂</li></ul><h3 id="模型剪枝流程" tabindex="-1"><a class="header-anchor" href="#模型剪枝流程"><span>模型剪枝流程</span></a></h3><p><strong>常见三种方法</strong></p><ol><li>训练一个模型-&gt;对模型进行剪枝-&gt;对剪枝后的模型进行微调</li><li>在模型训练过程中进行剪枝-&gt;对剪枝后的模型进行微调</li><li>进行剪枝-&gt;从头训练剪枝后的模型</li></ol><h2 id="模型量化-quantization" tabindex="-1"><a class="header-anchor" href="#模型量化-quantization"><span>模型量化（Quantization）</span></a></h2><p><strong>减少</strong>权重表示或激活所需的<strong>比特数</strong>来压缩模型，也就是降低模型参数的精度，<strong>是不改变模型参数量的</strong></p><figure><img src="'+i+'" alt="image-20250703160948495" tabindex="0" loading="lazy"><figcaption>image-20250703160948495</figcaption></figure><h2 id="模型蒸馏" tabindex="-1"><a class="header-anchor" href="#模型蒸馏"><span>模型蒸馏</span></a></h2><p>核心思想是通过让小型学生模型（<strong>Student Model</strong>）模仿大型教师模型（<strong>Teacher Model</strong>）的行为或知识，从而在保持较高性能的同时大幅减少模型的计算量和参数量</p><p>我第一段实习的时候做的是<strong>知识蒸馏</strong>，教师模型仅作<strong>推理任务</strong>，直接生成数据给小模型训练</p><h3 id="知识蒸馏" tabindex="-1"><a class="header-anchor" href="#知识蒸馏"><span>知识蒸馏</span></a></h3><p><strong>教师模型指导学生模型训练</strong>，通过<strong>蒸馏</strong>的方式让学生模型学习到教师模型的认识</p>',18)])])}const h=e(s,[["render",g]]),m=JSON.parse('{"path":"/dl/notes/Method.html","title":"压缩模型的方式","lang":"zh-CN","frontmatter":{"title":"压缩模型的方式","author":"xbZhong","isOriginal":true,"article":true,"category":"notes","timeline":true,"icon":"material-symbols:compress","date":"2025-06-26T00:00:00.000Z","description":"模型压缩三部分优化： 减少内存密集的范围量 提高获取模型参数时间 加速模型推理时间 模型剪枝（Pruning） 研究模型权重的冗余，尝试删除/修改冗余或者非关键权重，会改变模型参数量 image-20250703160937958image-20250703160937958 剪枝算法分类 非结构化剪枝：剪枝算法简单，模型压缩比高，权重矩阵会稀疏 结构...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"压缩模型的方式\\",\\"image\\":[\\"https://xbzhong.cn/screenshot/dl/image-20250703160937958.png\\",\\"https://xbzhong.cn/screenshot/dl/image-20250703160948495.png\\"],\\"datePublished\\":\\"2025-06-26T00:00:00.000Z\\",\\"dateModified\\":\\"2025-10-10T12:45:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xbZhong\\"}]}"],["meta",{"property":"og:url","content":"https://xbzhong.cn/dl/notes/Method.html"}],["meta",{"property":"og:site_name","content":"牢钟的博客"}],["meta",{"property":"og:title","content":"压缩模型的方式"}],["meta",{"property":"og:description","content":"模型压缩三部分优化： 减少内存密集的范围量 提高获取模型参数时间 加速模型推理时间 模型剪枝（Pruning） 研究模型权重的冗余，尝试删除/修改冗余或者非关键权重，会改变模型参数量 image-20250703160937958image-20250703160937958 剪枝算法分类 非结构化剪枝：剪枝算法简单，模型压缩比高，权重矩阵会稀疏 结构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xbzhong.cn/screenshot/dl/image-20250703160937958.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T12:45:16.000Z"}],["meta",{"property":"article:author","content":"xbZhong"}],["meta",{"property":"article:published_time","content":"2025-06-26T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-10T12:45:16.000Z"}]]},"git":{"createdTime":1760100316000,"updatedTime":1760100316000,"contributors":[{"name":"BO","username":"BO","email":"2396768163@qq.com","commits":1,"url":"https://github.com/BO"}]},"readingTime":{"minutes":1.44,"words":433},"filePathRelative":"dl/notes/Method.md","excerpt":"<p><strong>模型压缩三部分优化</strong>：</p>\\n<ol>\\n<li>减少内存密集的范围量</li>\\n<li>提高获取模型参数时间</li>\\n<li>加速模型推理时间</li>\\n</ol>\\n<h2>模型剪枝（Pruning）</h2>\\n<p>研究模型权重的冗余，尝试<strong>删除/修改</strong>冗余或者非关键权重，会<strong>改变模型参数量</strong></p>\\n<figure><img src=\\"/screenshot/dl/image-20250703160937958.png\\" alt=\\"image-20250703160937958\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>image-20250703160937958</figcaption></figure>","autoDesc":true}');export{h as comp,m as data};
