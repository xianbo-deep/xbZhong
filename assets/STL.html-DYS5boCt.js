import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,e as a,o as n}from"./app-Z1LCdd4-.js";const s="/screenshot/ds/image-43.png",t={};function r(o,l){return n(),i("div",null,[...l[0]||(l[0]=[a('<h2 id="迭代器-可以看作指针" tabindex="-1"><a class="header-anchor" href="#迭代器-可以看作指针"><span>迭代器(可以看作指针)</span></a></h2><ul><li><p>c++里面可以用auto自动识别迭代器类型</p></li><li><p>不用auto,则需要写完整代码。例如：vector&lt; int &gt; :: iterator it</p></li><li><p>for(auto x: nums)可以利用x来遍历nums，但不能修改值(其不是迭代器，因此输出时直接cout &lt;&lt; x即可)</p><ul><li><strong>x是深拷贝的一份数据</strong></li></ul></li><li><p>for(auto &amp;x:nums)可以利用x来修改容器nums的值</p><ul><li><strong>本质上x是指针</strong></li></ul></li><li><p>迭代器可分为迭代器和常量迭代器(常量迭代器适用于模板为const类型的，即值不可修改)</p></li><li><p>还可分为正向迭代器，反向迭代器，双向迭代器，随机访问迭代器</p></li><li><p>随机访问迭代器只有vector，deque，string有，他们对+=，,&lt;=,&gt;=进行了重载</p></li><li><p>支持双向迭代器的有set，map，list，multiset，multimap</p></li></ul><h2 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>string</span></a></h2><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><ul><li>string(); 初始化一个空字符串 例如：string str;</li><li>string(const char *s); 使用字符串s初始化</li><li>string(const string&amp; str); 使用一个string对象初始化</li><li>string(int n, char c); 使用n个字符初始化</li></ul><h3 id="赋值" tabindex="-1"><a class="header-anchor" href="#赋值"><span>赋值</span></a></h3><p>string str1,str2;</p><h4 id="直接赋值" tabindex="-1"><a class="header-anchor" href="#直接赋值"><span>直接赋值</span></a></h4><ul><li>str1 = &quot;hello&quot;;</li><li>str2 = str1;</li></ul><h4 id="使用成员函数" tabindex="-1"><a class="header-anchor" href="#使用成员函数"><span>使用成员函数</span></a></h4><ul><li>str1.assign(&quot;hello&quot;);</li><li>str1.assign(&quot;hello&quot;,3); 把hello前三个字符赋值给str1</li></ul><h3 id="字符串拼接" tabindex="-1"><a class="header-anchor" href="#字符串拼接"><span>字符串拼接</span></a></h3><ul><li>str1 += &quot;大帅哥&quot;；<strong>通过对+重载实现字符串拼接</strong></li><li>str1.append(&quot;大帅哥&quot;); <strong>使用成员函数进行拼接</strong></li><li>str2.append(str1,int pos,int n); <strong>从str中第pos个字符开始截取n个字符拼接到str2末尾</strong></li></ul><h3 id="查找和替换" tabindex="-1"><a class="header-anchor" href="#查找和替换"><span>查找和替换</span></a></h3><ul><li>s.find(string str,int pos);<strong>从s里的pos开始查找，未找到返回-1，找到则返回下标值</strong></li><li>s.rfind(); <strong>从右向左查找</strong></li><li>s.replace(int pos,int n,sting str);<strong>将s中从pos开始的n个字符替换成str</strong></li></ul><h3 id="字符出比较" tabindex="-1"><a class="header-anchor" href="#字符出比较"><span>字符出比较</span></a></h3><ul><li>根据字符的ASCII码进行比较 <ul><li><strong>=</strong> 返回0</li><li><strong>&gt;</strong> 返回1</li><li><strong>&lt;</strong> 返回-1</li></ul></li><li>s.compare(str) <strong>s与str比较</strong></li></ul><h3 id="string字符存取" tabindex="-1"><a class="header-anchor" href="#string字符存取"><span>string字符存取</span></a></h3><ul><li>str[1] <strong>类似数组的方式来获取字符</strong></li><li><a href="http://s.at" target="_blank" rel="noopener noreferrer">s.at</a>(i)<strong>也可获取字符串</strong></li></ul><h3 id="字符串插入和删除" tabindex="-1"><a class="header-anchor" href="#字符串插入和删除"><span>字符串插入和删除</span></a></h3><ul><li>s.insert(pos,str);<strong>从s中pos位置开始插入str</strong></li><li>s.erase(pos,n);<strong>从s中pos位置开始删除n个字符</strong></li></ul><h3 id="获取子串" tabindex="-1"><a class="header-anchor" href="#获取子串"><span>获取子串</span></a></h3><ul><li>s.substr(pos,n);<strong>从s中pos位置开始读取n个字符并返回，返回类型为string</strong></li></ul><h3 id="常见接口" tabindex="-1"><a class="header-anchor" href="#常见接口"><span>常见接口</span></a></h3><blockquote><p>s.size();<br> s.copy();<br> s.length();<br> s.assign();<br> s.append();<br> s.find();<br> s.rfind();<br> s.replace();<br> s.compare();<br><a href="http://s.at" target="_blank" rel="noopener noreferrer">s.at</a>();<br> s.insert();<br> s.erase();</p></blockquote><h2 id="vector-单端数组-支持动态扩展" tabindex="-1"><a class="header-anchor" href="#vector-单端数组-支持动态扩展"><span>vector(单端数组，支持动态扩展)</span></a></h2><p><strong>动态扩展：找更大的内存空间，拷贝数据，释放原空间</strong><br><strong>需要注意的是：动态扩展后内存地址发生变化，原有的迭代器会失效</strong><br><strong>vector的迭代器是支持随机访问的迭代器</strong><br> 常用迭代器：v.begin(),v.end(),v.rbegin(),v.rend().后两个为反向迭代器。<strong>.end()和.rend()是指向元素的下一个地址</strong></p><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1"><span>初始化</span></a></h3><ul><li>vector&lt; int &gt; v;</li><li>vector(v.begin().v.end());将v[begin(),end())区间中的元素拷贝。<strong>左闭右开</strong></li></ul><h3 id="赋值-1" tabindex="-1"><a class="header-anchor" href="#赋值-1"><span>赋值</span></a></h3><ul><li>通过重载=运算符直接对vector直接赋值</li><li>.assign()进行赋值</li><li>可以用{}对vector进行赋值</li></ul><h3 id="容量和大小" tabindex="-1"><a class="header-anchor" href="#容量和大小"><span>容量和大小</span></a></h3><ul><li>.empty(); 非空返回false，空返回true</li><li>.capacity()返回值&gt;=.size()返回值</li><li>.resize(int num,(int elem)); 重新指定容器长度为num，容器变短，超出长度的元素被删除，容器变长，默认值填充(用elem值填充)</li></ul><h3 id="插入和删除" tabindex="-1"><a class="header-anchor" href="#插入和删除"><span>插入和删除</span></a></h3><ul><li>.push_back(); 尾插</li><li>.pop_back(); 尾删</li><li>.insert(pos,ele); 迭代器指向位置pos插入ele(pos为迭代器)</li><li>.erase(pos); 删除迭代器指向的元素(pos为迭代器) <strong>也支持删除区间元素</strong></li><li>.clear(); 删除容器中所有元素</li></ul><h3 id="数据读取" tabindex="-1"><a class="header-anchor" href="#数据读取"><span>数据读取</span></a></h3><ul><li>支持下标访问 例如：arr[1];</li><li>.front(); 返回头部元素；</li><li>.back(); 返回尾部元素；</li></ul><h3 id="互换容器" tabindex="-1"><a class="header-anchor" href="#互换容器"><span>互换容器</span></a></h3><ul><li>功能：实现两个容器元素互换</li><li>.swap(vec);</li><li>可以使用swap收缩内存，防止内存造成浪费 <strong>vector&lt; int &gt;(v).swap(v)</strong> vector&lt; int &gt; (v) 为匿名对象</li></ul><h3 id="预留空间" tabindex="-1"><a class="header-anchor" href="#预留空间"><span>预留空间</span></a></h3><ul><li>.reserve(int len); 预留len个元素的长度，元素不可访问，不初始化(需push_back) <strong>可以减少容器动态扩展的次数</strong></li></ul><h3 id="常见接口-1" tabindex="-1"><a class="header-anchor" href="#常见接口-1"><span>常见接口</span></a></h3><blockquote><p>.begin(),.end().rbegin(),.rend()<br> .assign();<br> .empty();<br> .capacity();<br> .size(); .resize();<br> .push_back();<br> .pop_back();<br> .insert();<br> .erase();<br> .front();<br> .back();<br> .reserve();</p></blockquote><h2 id="deque-双端数组-支持头插-删-尾插-删" tabindex="-1"><a class="header-anchor" href="#deque-双端数组-支持头插-删-尾插-删"><span>deque(双端数组，支持头插，删，尾插，删)</span></a></h2><p><strong>迭代器支持随机访问</strong><br><strong>其方法和vector差不多</strong></p><h2 id="stack-先进后出" tabindex="-1"><a class="header-anchor" href="#stack-先进后出"><span>stack(先进后出)</span></a></h2><p><strong>栈不允许遍历，只有栈顶才能被外界访问</strong></p><h3 id="常见接口-2" tabindex="-1"><a class="header-anchor" href="#常见接口-2"><span>常见接口</span></a></h3><blockquote><p>.push();<br> .pop();<br> .top();<br> .size();<br> .empty();</p></blockquote><h2 id="queue-先进先出" tabindex="-1"><a class="header-anchor" href="#queue-先进先出"><span>queue(先进先出)</span></a></h2><p><strong>队列不允许遍历，只有队头和队尾能被外界访问</strong><br><strong>队头出，队尾进</strong></p><h3 id="常见接口-3" tabindex="-1"><a class="header-anchor" href="#常见接口-3"><span>常见接口</span></a></h3><blockquote><p>.push();<br> .pop();<br> .size();<br> .empty();<br> .front();<br> .back();</p></blockquote><h2 id="list-双向循环链表" tabindex="-1"><a class="header-anchor" href="#list-双向循环链表"><span>list(双向循环链表)</span></a></h2><p><strong>链表的存储方式并不是连续的内存空间，list中的迭代器只支持前移和后移，是双向迭代器</strong>(不支持[]操作)</p><h3 id="赋值和交换" tabindex="-1"><a class="header-anchor" href="#赋值和交换"><span>赋值和交换</span></a></h3><ul><li>.assign(); <strong>不支持单个填入，若有需要则.assign(1,10)</strong></li><li>.swap();</li><li>重载=运算符直接赋值</li></ul><h3 id="插入和删除-1" tabindex="-1"><a class="header-anchor" href="#插入和删除-1"><span>插入和删除</span></a></h3><ul><li>.insert(pos,elem);在pos(迭代器)位置插入elem值、</li><li>.erase(pos); pos为迭代器</li><li>.remove(elem); 删除容器中所有与elem值相同的元素</li></ul><h3 id="反转和排序" tabindex="-1"><a class="header-anchor" href="#反转和排序"><span>反转和排序</span></a></h3><ul><li>.reverse(); 反转链表；</li><li>.sort(); 直接l1.sort(); <strong>支持自定义排序方式</strong><br><strong>所有不支持随机访问迭代器的容器，不可以用标准算法</strong></li></ul><h3 id="常见接口-4" tabindex="-1"><a class="header-anchor" href="#常见接口-4"><span>常见接口</span></a></h3><blockquote><p>.assign();<br> .swap();<br> .push_front();<br> .pop_front();<br> .push_back();<br> .pop_back();<br> .empty();<br> .size(); .resize();<br> .insert();<br> .erase();<br> .clear();<br> .remove();<br> .reverse();<br> .sort();</p></blockquote><h2 id="set-multiset" tabindex="-1"><a class="header-anchor" href="#set-multiset"><span>set/multiset</span></a></h2><ul><li>关联式容器(插入时自动排序)</li><li>底层结构用二叉树实现<br> set和multiset区别：</li><li>set不允许有重复元素</li><li>multiset允许有重复元素</li></ul><h3 id="赋值-2" tabindex="-1"><a class="header-anchor" href="#赋值-2"><span>赋值</span></a></h3><ul><li>重载=运算符进行赋值</li></ul><h3 id="插入和删除-2" tabindex="-1"><a class="header-anchor" href="#插入和删除-2"><span>插入和删除</span></a></h3><p><strong>只有.insert()</strong></p><ul><li>.erase(); <ul><li>.erase(pos)可用迭代器删除</li><li>.erase(elem)可删除指定元素</li></ul></li></ul><h3 id="查找和统计" tabindex="-1"><a class="header-anchor" href="#查找和统计"><span>查找和统计</span></a></h3><ul><li>.find(key); 查找key是否存在，存在则返回该元素的迭代器，不存在则返回.end();</li><li>.count(key); 统计元素key的个数</li></ul><h3 id="大小和交换" tabindex="-1"><a class="header-anchor" href="#大小和交换"><span>大小和交换</span></a></h3><ul><li>不支持resize</li></ul><h3 id="pair" tabindex="-1"><a class="header-anchor" href="#pair"><span>pair</span></a></h3><ul><li>set也可以存储pair类型的数据。set&lt; pair &lt; int , int &gt; &gt;;</li><li>按照first值大小进行排序</li></ul><h4 id="创建方式" tabindex="-1"><a class="header-anchor" href="#创建方式"><span>创建方式</span></a></h4><ul><li>pair&lt; type , type &gt; p (value1,value2);</li><li>pair&lt; type , type &gt; p = make_pair(value1,value2);</li></ul><h4 id="访问" tabindex="-1"><a class="header-anchor" href="#访问"><span>访问</span></a></h4><ul><li>.first(); 访问pair中第一个元素</li><li>.second(); 访问pair中第二个元素</li></ul><h3 id="仿函数" tabindex="-1"><a class="header-anchor" href="#仿函数"><span>仿函数</span></a></h3><p><strong>利用仿函数，可以改变排序规则</strong><br><img src="'+s+'" alt="alt text" loading="lazy"></p><blockquote><p>自定义排序时，要通过创建<strong>类</strong>来重载运算符，从而更改排序规则<br> 不可以通过创建函数来自定义排序规则，因为set里面要存储的是数据类型而不是函数</p></blockquote><h3 id="常见接口-5" tabindex="-1"><a class="header-anchor" href="#常见接口-5"><span>常见接口</span></a></h3><blockquote><p>.insert();<br> .size();<br> .empty();<br> .swap();<br> .clear();<br> .erase();<br> .find();<br> .count();</p></blockquote><h2 id="map-multimap" tabindex="-1"><a class="header-anchor" href="#map-multimap"><span>map/multimap</span></a></h2><ul><li>map中所有元素都是pair</li><li>pair中第一个元素为key(键值)，起索引作用，第二个元素为value(实值)</li><li>可用key快速找到value</li><li>map不允许有重复key值元素(value可以重复)</li><li>multimap允许有重复key值</li><li>map按照key进行排序</li></ul><h3 id="初始化-2" tabindex="-1"><a class="header-anchor" href="#初始化-2"><span>初始化</span></a></h3><ul><li>map&lt; int , int &gt; m;</li></ul><h3 id="赋值-3" tabindex="-1"><a class="header-anchor" href="#赋值-3"><span>赋值</span></a></h3><ul><li>重载=运算符</li><li>m.insert(pair&lt; int , int &gt;)(key,value);</li></ul><h3 id="插入和删除-3" tabindex="-1"><a class="header-anchor" href="#插入和删除-3"><span>插入和删除</span></a></h3><ul><li>.insert(); <ul><li>m.insert(pair&lt; int ,int &gt;)(key,value);</li><li>m.insert(make_pair(key,value));</li><li>m[ key ] = 20; <strong>若key不存在会自动创建</strong> 可以用m[ key ]访问对应的value值.<strong>会覆盖原有数据</strong></li></ul></li><li>.erase(); <ul><li>.erase(key);按照key值删除对应的value</li><li>.erase(pos);按照迭代器位置删除value</li></ul></li><li>.erase();</li></ul><h3 id="查找和统计-1" tabindex="-1"><a class="header-anchor" href="#查找和统计-1"><span>查找和统计</span></a></h3><ul><li>.find();返回的是迭代器</li></ul><h3 id="排序操作" tabindex="-1"><a class="header-anchor" href="#排序操作"><span>排序操作</span></a></h3><ul><li>类似set的操作</li></ul><h3 id="访问操作" tabindex="-1"><a class="header-anchor" href="#访问操作"><span>访问操作</span></a></h3><p><strong>可以把map当成一个结构体指针</strong></p><ul><li>s.begin()-&gt;first(second);</li><li>(*s,begin()).first(second);</li><li>通过key访问。m[ key ];</li></ul><h3 id="常用接口" tabindex="-1"><a class="header-anchor" href="#常用接口"><span>常用接口</span></a></h3><blockquote><p>.size();<br> .empty();<br> .swap();<br> .clear();<br> .insert();<br> .erase();<br> .find();<br> .count();</p></blockquote><h3 id="函数对象-类" tabindex="-1"><a class="header-anchor" href="#函数对象-类"><span>函数对象(类)</span></a></h3><ul><li>重载函数调用操作符的类，其对象也称为函数对象</li><li>函数对象使用重载的()时，行为类似函数调用，也叫仿函数</li></ul><h3 id="谓词" tabindex="-1"><a class="header-anchor" href="#谓词"><span>谓词</span></a></h3><ul><li>返回类型为bool类型的仿函数为谓词</li><li>一元谓词(operator()接收一个参数)</li><li>二元谓词(operator()接收两个参数)</li><li>可以用谓词来自定义排序规则</li></ul><h3 id="内建函数" tabindex="-1"><a class="header-anchor" href="#内建函数"><span>内建函数</span></a></h3><p><strong>要使用functional头文件</strong></p><ul><li>算术仿函数</li><li>关系仿函数</li><li>逻辑仿函数</li></ul><h4 id="算术仿函数" tabindex="-1"><a class="header-anchor" href="#算术仿函数"><span>算术仿函数</span></a></h4><ul><li>plus&lt; T &gt;;加法仿函数</li><li>minus&lt; T &gt;;减法仿函数</li><li>multiplies&lt; T &gt;;乘法仿函数</li><li>divides&lt; T &gt;;除法仿函数</li><li>modulus&lt; T &gt;;取模仿函数</li><li>negate&lt; T &gt;;取反仿函数<br><strong>只有negate是一元运算，其它都是二元运算</strong></li></ul><blockquote><p>例子； plus&lt; int &gt; v; //本质上是类<br> v(50,10); //把其当作函数来调用</p></blockquote><h4 id="关系仿函数" tabindex="-1"><a class="header-anchor" href="#关系仿函数"><span>关系仿函数</span></a></h4><ul><li>bool equal_to&lt; T &gt;;等于</li><li>bool not_equal_to&lt; T &gt;;不等于</li><li>bool greater&lt; T &gt;;大于</li><li>bool greater_equal&lt; T &gt;;大于等于</li><li>bool less&lt; T &gt;;小于</li><li>bool less_equal&lt; T &gt;;小于等于<br><strong>可以在sort里面直接使用</strong></li></ul><h4 id="逻辑仿函数" tabindex="-1"><a class="header-anchor" href="#逻辑仿函数"><span>逻辑仿函数</span></a></h4><ul><li>bool logical_and&lt; T &gt;;逻辑与</li><li>bool logical_or&lt; T &gt;;逻辑或</li><li>bool logical_not&lt; T &gt;;逻辑非</li></ul><h2 id="stl常见算法" tabindex="-1"><a class="header-anchor" href="#stl常见算法"><span>STL常见算法</span></a></h2><p><strong>主要由&lt; algorithm &gt; &lt; functional &gt;&lt; numeric &gt;组成</strong></p><h3 id="常用遍历算法" tabindex="-1"><a class="header-anchor" href="#常用遍历算法"><span>常用遍历算法</span></a></h3><ul><li>for_each 遍历容器 <ul><li>for_each(beg,end,_func);</li><li>beg:开始迭代器 end:结束迭代器 _func:函数或者函数对象(遍历时你要进行的操作，如打印等等)</li><li>_func是函数则不加括号，是仿函数则加括号</li></ul></li><li>transform 搬运容器到另一个容器中 <ul><li>transform(beg1,end1,beg2,_func)</li><li>beg1:源容器开始迭代器 end1:源容器结束迭代器 beg2:目标容器开始迭代器 _func:函数或者函数对象(一般是对元素作逻辑运算)</li><li>在transform时要提前对目标容器开辟空间</li></ul></li></ul><h3 id="常用查找算法" tabindex="-1"><a class="header-anchor" href="#常用查找算法"><span>常用查找算法</span></a></h3><ul><li>find；查找元素 <ul><li>find(beg,end,value)</li><li>beg：开始迭代器 end:结束迭代器 value:查找的元素</li><li>返回目标元素的迭代器,找不到则返回end</li><li>对于自定义数据类型有时还需要重载运算符</li></ul></li><li>find_if；按条件查找元素 <ul><li>find_if(beg,end,_prec)</li><li>beg：开始迭代器 end:结束迭代器 _prec:谓词(仿函数,返回值为bool类型)</li></ul></li><li>adjacent_find；查找相邻重复元素 <ul><li>adjacent_find(beg,end)</li><li>会返回相邻元素的第一个位置的迭代器</li><li>beg:起始迭代器 end:结束迭代器</li></ul></li><li>binary_search；二分查找法 <ul><li>返回类型为bool类型</li><li>binary_search(beg,end,value)</li><li>beg:起始迭代器 end:结束迭代器</li><li>容器内元素一定要是有序序列</li></ul></li><li>count；统计元素个数 <ul><li>count(beg,end,value)</li><li>beg：开始迭代器 end:结束迭代器 value:查找的元素</li><li>统计自定义数据类型，重载运算符时对参数加const</li></ul></li><li>count_if；按条件统计元素个数 <ul><li>count_if(beg,end,_prec)</li><li>beg：开始迭代器 end:结束迭代器 _prec:谓词(仿函数,返回值为bool类型)</li></ul></li></ul><h3 id="常用排序算法" tabindex="-1"><a class="header-anchor" href="#常用排序算法"><span>常用排序算法</span></a></h3><ul><li>sort; 对容器元素进行排序 <ul><li>可以传仿函数，函数</li></ul></li><li>random_shuffle; 指定范围内的元素随机调整次序 <ul><li>random_shuff (lebeg,end,value)</li><li>beg：开始迭代器 end:结束迭代器</li></ul></li><li>merge; 两个容器元素合并，存储到另一容器中 <ul><li>merge(beg1,end1,beg2,end2,dest)</li><li>beg1：容器1开始迭代器 end1:容器1结束迭代器 beg2：容器2开始迭代器 end2:容器2结束迭代器 dest:目标容器开始迭代器</li><li>两个容器必须是有序的，合并之后还是有序的</li></ul></li><li>reverse;反转范围内的指定元素 <ul><li>reverse(beg,end)</li><li>beg：开始迭代器 end:结束迭代器</li></ul></li></ul><h3 id="常用拷贝和替换算法" tabindex="-1"><a class="header-anchor" href="#常用拷贝和替换算法"><span>常用拷贝和替换算法</span></a></h3><ul><li>copy;拷贝元素到另一容器 <ul><li>merge(beg,end,dest)</li><li>beg：开始迭代器 end:结束迭代器 dest:目标起始迭代器</li></ul></li><li>replace;将容器内指定范围的旧元素改成新元素 <ul><li>replace(beg,end,oldvalue,newvalue)</li><li>beg：开始迭代器 end:结束迭代器 oldvalue：旧元素 newvalue:新元素</li></ul></li><li>replace_if; <ul><li>replace_if(beg,end,_pred,newvalue)</li><li>beg：开始迭代器 end:结束迭代器 _pred：谓词 newvalue:新元素</li></ul></li><li>swap; <ul><li>swap(c1,c2)</li><li>c1:容器1 c2:容器2 <strong>同种类型的容器才可实现swap</strong></li></ul></li></ul><h3 id="常用算术生成算法" tabindex="-1"><a class="header-anchor" href="#常用算术生成算法"><span>常用算术生成算法</span></a></h3><ul><li>头文件为&lt; numeric &gt;</li><li>accmulate; 计算容器元素累计总和 <ul><li>accmulate(beg,end,value)</li><li>beg：开始迭代器 end:结束迭代器 value:起始值</li></ul></li><li>fill; 向容器中添加元素 <ul><li>fill(beg,end,value)</li><li>beg：开始迭代器 end:结束迭代器 value:填充值</li></ul></li></ul><h3 id="常用集合算法" tabindex="-1"><a class="header-anchor" href="#常用集合算法"><span>常用集合算法</span></a></h3><p><strong>两个集合必须是有序序列</strong></p><ul><li>set_intersection; 求两个容器的交集 <ul><li>set_intersection(beg1,end1,beg2,end2,dest)</li><li>beg1：容器1开始迭代器 end1:容器1结束迭代器 beg2：容器2开始迭代器 end2:容器2结束迭代器 dest:目标容器开始迭代器</li><li>目标容器需要提前开辟空间(取较小容器的size)</li><li>最好用一个迭代器接收函数返回值，否则输出时会输出默认值</li></ul></li><li>set_union; 求两个容器的并集 <ul><li>set_union(beg1,end1,beg2,end2,dest)</li><li>beg1：容器1开始迭代器 end1:容器1结束迭代器 beg2：容器2开始迭代器 end2:容器2结束迭代器 dest:目标容器开始迭代器</li><li>要提前开辟空间(两个容器size相加)</li><li>最好用一个迭代器接收函数返回值(返回值是最后一个元素的位置)，否则输出时会输出默认值</li></ul></li><li>set_difference; 求两个容器的差集 <ul><li>set_difference(beg1,end1,beg2,end2,dest)</li><li>beg1：容器1开始迭代器 end1:容器1结束迭代器 beg2：容器2开始迭代器 end2:容器2结束迭代器 dest:目标容器开始迭代器</li><li>要提前开辟空间(取较大容器的size)</li><li>最好用一个迭代器接收函数返回值(返回值是最后一个元素的位置)，否则输出时会输出默认值</li><li>谁和谁的差集是有区别的，例如v1和v2的差集就是v1里面不是交集的部分</li></ul></li></ul>',131)])])}const u=e(t,[["render",r]]),d=JSON.parse('{"path":"/ds/STL.html","title":"STL","lang":"zh-CN","frontmatter":{"title":"STL","author":"xbZhong","isOriginal":true,"article":true,"category":"ds","timeline":true,"icon":"hugeicons:cpp","description":"迭代器(可以看作指针) c++里面可以用auto自动识别迭代器类型 不用auto,则需要写完整代码。例如：vector< int > :: iterator it for(auto x: nums)可以利用x来遍历nums，但不能修改值(其不是迭代器，因此输出时直接cout << x即可) x是深拷贝的一份数据 for(auto &x:nums)可以利...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"STL\\",\\"image\\":[\\"https://xbzhong.cn/screenshot/ds/image-43.png\\"],\\"dateModified\\":\\"2025-10-10T12:45:16.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xbZhong\\"}]}"],["meta",{"property":"og:url","content":"https://xbzhong.cn/ds/STL.html"}],["meta",{"property":"og:site_name","content":"牢钟的博客"}],["meta",{"property":"og:title","content":"STL"}],["meta",{"property":"og:description","content":"迭代器(可以看作指针) c++里面可以用auto自动识别迭代器类型 不用auto,则需要写完整代码。例如：vector< int > :: iterator it for(auto x: nums)可以利用x来遍历nums，但不能修改值(其不是迭代器，因此输出时直接cout << x即可) x是深拷贝的一份数据 for(auto &x:nums)可以利..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://xbzhong.cn/screenshot/ds/image-43.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T12:45:16.000Z"}],["meta",{"property":"article:author","content":"xbZhong"}],["meta",{"property":"article:modified_time","content":"2025-10-10T12:45:16.000Z"}]]},"git":{"createdTime":1760100316000,"updatedTime":1760100316000,"contributors":[{"name":"BO","username":"BO","email":"2396768163@qq.com","commits":1,"url":"https://github.com/BO"}]},"readingTime":{"minutes":11.1,"words":3329},"filePathRelative":"ds/STL.md","excerpt":"<h2>迭代器(可以看作指针)</h2>\\n<ul>\\n<li>\\n<p>c++里面可以用auto自动识别迭代器类型</p>\\n</li>\\n<li>\\n<p>不用auto,则需要写完整代码。例如：vector&lt; int &gt; :: iterator it</p>\\n</li>\\n<li>\\n<p>for(auto x: nums)可以利用x来遍历nums，但不能修改值(其不是迭代器，因此输出时直接cout &lt;&lt; x即可)</p>\\n<ul>\\n<li><strong>x是深拷贝的一份数据</strong></li>\\n</ul>\\n</li>\\n<li>\\n<p>for(auto &amp;x:nums)可以利用x来修改容器nums的值</p>\\n<ul>\\n<li><strong>本质上x是指针</strong></li>\\n</ul>\\n</li>\\n<li>\\n<p>迭代器可分为迭代器和常量迭代器(常量迭代器适用于模板为const类型的，即值不可修改)</p>\\n</li>\\n<li>\\n<p>还可分为正向迭代器，反向迭代器，双向迭代器，随机访问迭代器</p>\\n</li>\\n<li>\\n<p>随机访问迭代器只有vector，deque，string有，他们对+=，,&lt;=,&gt;=进行了重载</p>\\n</li>\\n<li>\\n<p>支持双向迭代器的有set，map，list，multiset，multimap</p>\\n</li>\\n</ul>","autoDesc":true}');export{u as comp,d as data};
