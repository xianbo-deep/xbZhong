import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,e as t,o as i}from"./app-mgLRyZlD.js";const l="/screenshot/ds/image-68.png",e="/screenshot/ds/image-69.png",p="/screenshot/ds/image-70.png",r="/screenshot/ds/image-71.png",m="/screenshot/ds/image-72.png",c="/screenshot/ds/image-73.png",o="/screenshot/ds/image-74.png",h="/screenshot/ds/image-77.png",g="/screenshot/ds/image-75.png",d="/screenshot/ds/image-78.png",u="/screenshot/ds/image-79.png",x="/screenshot/ds/image-80.png",f="/screenshot/ds/image-81.png",b={};function y(v,s){return i(),n("div",null,[...s[0]||(s[0]=[t('<h2 id="二叉排序树" tabindex="-1"><a class="header-anchor" href="#二叉排序树"><span>二叉排序树</span></a></h2><ul><li>对于任意的根节点 <ul><li>左子树的值 &lt; 根节点的值</li><li>右子树的值 &gt; 根节点的值</li></ul></li><li>类似中序遍历的遍历方式 ，因此用中序遍历遍历出来一定是有序的</li></ul><h3 id="插入" tabindex="-1"><a class="header-anchor" href="#插入"><span>插入</span></a></h3><p><strong>与根节点比较，判断要插入到左子树还是右子树</strong></p><h3 id="删除" tabindex="-1"><a class="header-anchor" href="#删除"><span>删除</span></a></h3><ol><li>删除叶子节点 <ul><li>直接删除，让父节点指针指向空地址</li></ul></li><li>删除出度为1的节点 <ul><li>出度为1的节点只有一个子节点</li><li>交换子节点和根节点的位置</li><li>删除根节点(此时根节点变成叶子节点)</li></ul></li><li>删除出度为2的节点 <ul><li>当前节点既有左子树又有右子树</li><li>当前节点的前驱(中序遍历)是左子树中的最大值,后继是右子树中的最小值</li><li>前驱是左子树中最右边的节点，因此一定没有右子树，同理，后继也一定没有左子树</li><li>用前驱和根节点交换，将问题转化为删除度为1的节点</li></ul></li></ol><h2 id="avl树-平衡二叉排序树" tabindex="-1"><a class="header-anchor" href="#avl树-平衡二叉排序树"><span>AVL树(平衡二叉排序树)</span></a></h2><ul><li>左右子树的高度差不会超过1，也就是说树不会退化成链表</li><li>其它与二叉排序树性质相同</li></ul><h3 id="左旋与右旋" tabindex="-1"><a class="header-anchor" href="#左旋与右旋"><span>左旋与右旋</span></a></h3><h4 id="左旋" tabindex="-1"><a class="header-anchor" href="#左旋"><span>左旋</span></a></h4><figure><img src="'+l+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>K3的左子树的值比K1的值大</li><li>左旋后将K3的左子树变为K1的右子树</li></ul><h4 id="右旋" tabindex="-1"><a class="header-anchor" href="#右旋"><span>右旋</span></a></h4><figure><img src="'+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>K2的右子树的值比K1的值小</li><li>右旋后将K2的右子树变为K1的左子树</li></ul><h3 id="失衡类型" tabindex="-1"><a class="header-anchor" href="#失衡类型"><span>失衡类型</span></a></h3><figure><img src="'+p+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h4 id="ll型" tabindex="-1"><a class="header-anchor" href="#ll型"><span>LL型</span></a></h4><ul><li>站在K1节点看左子树比右子树更高</li><li>K1节点左子树的左子树比右子树更高</li><li>用一个右旋</li></ul><h4 id="lr型" tabindex="-1"><a class="header-anchor" href="#lr型"><span>LR型</span></a></h4><ul><li>站在K1节点看左子树比右子树更高</li><li>K1节点左子树的右子树比左子树更高</li><li>先左旋再右旋</li></ul><h4 id="rl型" tabindex="-1"><a class="header-anchor" href="#rl型"><span>RL型</span></a></h4><ul><li>站在K1节点看右子树比左子树更高</li><li>K1节点右子树的左子树比右子树更高</li><li>先右旋再左旋</li></ul><h4 id="rr型" tabindex="-1"><a class="header-anchor" href="#rr型"><span>RR型</span></a></h4><ul><li>站在K1节点看右子树比左子树更高</li><li>K1节点左子树的右子树比左子树更高</li><li>用一个左旋</li></ul><h2 id="红黑树-平衡二叉排序树" tabindex="-1"><a class="header-anchor" href="#红黑树-平衡二叉排序树"><span>红黑树(平衡二叉排序树)</span></a></h2><p><strong>平衡条件</strong></p><ol><li>每个节点非黑即红</li><li>根节点为黑色</li><li>叶节点(NIL)是黑色,是虚拟空节点，而不是叶子节点</li><li>如果一个节点是红色，那他的两个子节点都是黑色的</li><li>从根节点出发到叶子节点(虚拟空节点)路径上，黑色节点数量相同！！!</li></ol><ul><li>红黑树中，最长路径是最短路径的两倍</li><li>新插入的节点是红色节点(插入黑色必定失衡)</li></ul><hr><p><strong>只能以确定颜色的节点去进行平衡调整！！！</strong></p><h3 id="插入-1" tabindex="-1"><a class="header-anchor" href="#插入-1"><span>插入</span></a></h3><figure><img src="'+r+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>20与18发生冲突时，叔父节点是红色</li><li>此时把1改成黑，15改成红，20改成黑(黑红红-&gt;红黑黑)</li></ul><hr><figure><img src="'+m+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>叔父节点是黑色</li><li>按照红色节点的位置进行分类，即LL,LR,RL,RR(AVL树)，如图为LL型</li><li>根据分得的种类进行左旋或右旋，再对根节点及其左右节点使用红色上浮或红色下沉的方法调整颜色，如图<br><img src="'+c+'" alt="alt text" loading="lazy"><br><strong>调整完后，根节点要设置成黑色</strong>(根节点颜色的变化不改变路径上黑节点数量)</li></ul><hr><h3 id="删除-1" tabindex="-1"><a class="header-anchor" href="#删除-1"><span>删除</span></a></h3><ul><li>直接删除度为0的红色节点(不存在度为1的红色节点)</li><li>度为1的黑色节点的子孩子只可能是红色 <ul><li>红提升变黑，删原黑</li></ul></li><li>删除度为0的黑色节点 <ul><li>将对应路径上的NIL标记为双重黑</li></ul></li><li>删除度为2的节点可以转化为删除度为1的节点或删除度为0的节点的情况</li></ul><hr><figure><img src="'+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>双重黑节点的兄弟节点是黑色，且其两个子节点都为黑色</li><li>双重黑节点的父节点加上一重黑色(是红则变黑，是黑则变双重黑)。即若父节点是黑色，则需要继续进行调整，因为此时这颗子树无法调整至平衡</li><li>双重黑节点及其兄弟节点各减去一重黑色</li></ul><hr><figure><img src="'+h+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><figure><img src="'+g+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>双重黑节点的兄弟节点是黑色，且其右节点是红色(RR)</li><li>抓住双重黑节点的父节点进行左旋</li><li>原根节点和双重黑节点的兄弟节点的右节点改为黑色</li><li>左旋后的新根节点变为原根节点的颜色</li></ul><hr><figure><img src="'+d+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>此种情况可以抓住兄弟节点进行右旋，转变为RR情况</li></ul><figure><img src="'+u+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>右旋后的新根节点变成黑色</li><li>原根结点变成红色</li><li>接着变成RR情况</li></ul><hr><ul><li>双重黑节点的兄弟节点是红色<br><img src="'+x+'" alt="alt text" loading="lazy"></li><li>将红色节点调整到根节点，并将其变成黑色</li><li>将原根节点变成红色(因为其两个子节点都是确定的黑色)</li><li>双重黑节点的兄弟节点是黑色，是前面所提到的情况</li></ul><h2 id="b-树" tabindex="-1"><a class="header-anchor" href="#b-树"><span>B-树</span></a></h2><p>一颗m阶B树，需要满足下列特性：</p><ol><li>树中每个节点，最多含有m棵子树</li><li>若根节点不是叶子节点，则至少有2棵子树</li><li>除根节点之外的所有非终端节点至少有m/2棵子树</li><li>如果一个节点有n-1个关键字，则该结点有n个分支，且这n-1个关键字按照递增顺序排列</li><li>每个节点的结构为：(n,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">A_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">K_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">K_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">A_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,...,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>K</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">K_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0715em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">A_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>)</li><li>非根节点中关键字个数n，满足：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">⌈</mo><mi>m</mi><mi mathvariant="normal">/</mi><mn>2</mn><mo stretchy="false">⌉</mo></mrow><annotation encoding="application/x-tex">\\lceil m/2 \\rceil</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌈</span><span class="mord mathnormal">m</span><span class="mord">/2</span><span class="mclose">⌉</span></span></span></span> - 1 &lt;= m - 1</li><li>所有叶子节点在同一层</li></ol><h3 id="插入-2" tabindex="-1"><a class="header-anchor" href="#插入-2"><span>插入</span></a></h3><p><strong>将元素插入到终端节点处</strong><br> 当关键字超过上限，需要进行插入调整<br><strong>核心操作：节点分裂</strong></p><h4 id="插入调整" tabindex="-1"><a class="header-anchor" href="#插入调整"><span>插入调整</span></a></h4><figure><img src="'+f+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><ul><li>将关键字数量超过上限的节点从中间提取出一个关键字提升为父节点</li><li>其余的关键字为父节点的子树</li></ul>',62)])])}const z=a(b,[["render",y]]),K=JSON.parse('{"path":"/ds/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%9F%BA%E7%A1%80.html","title":"平衡树","lang":"zh-CN","frontmatter":{"title":"平衡树","author":"xbZhong","isOriginal":true,"article":false,"category":"ds","timeline":true,"icon":"mingcute:code-line","description":"二叉排序树 对于任意的根节点 左子树的值 < 根节点的值 右子树的值 > 根节点的值 类似中序遍历的遍历方式 ，因此用中序遍历遍历出来一定是有序的 插入 与根节点比较，判断要插入到左子树还是右子树 删除 删除叶子节点 直接删除，让父节点指针指向空地址 删除出度为1的节点 出度为1的节点只有一个子节点 交换子节点和根节点的位置 删除根节点(此时根节点变成...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"平衡树\\",\\"description\\":\\"二叉排序树 对于任意的根节点 左子树的值 < 根节点的值 右子树的值 > 根节点的值 类似中序遍历的遍历方式 ，因此用中序遍历遍历出来一定是有序的 插入 与根节点比较，判断要插入到左子树还是右子树 删除 删除叶子节点 直接删除，让父节点指针指向空地址 删除出度为1的节点 出度为1的节点只有一个子节点 交换子节点和根节点的位置 删除根节点(此时根节点变成...\\"}"],["meta",{"property":"og:url","content":"https://xbzhong.cn/ds/%E5%B9%B3%E8%A1%A1%E6%A0%91%E5%9F%BA%E7%A1%80.html"}],["meta",{"property":"og:site_name","content":"牢钟的博客"}],["meta",{"property":"og:title","content":"平衡树"}],["meta",{"property":"og:description","content":"二叉排序树 对于任意的根节点 左子树的值 < 根节点的值 右子树的值 > 根节点的值 类似中序遍历的遍历方式 ，因此用中序遍历遍历出来一定是有序的 插入 与根节点比较，判断要插入到左子树还是右子树 删除 删除叶子节点 直接删除，让父节点指针指向空地址 删除出度为1的节点 出度为1的节点只有一个子节点 交换子节点和根节点的位置 删除根节点(此时根节点变成..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://xbzhong.cn/screenshot/ds/image-68.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-10T12:45:16.000Z"}],["meta",{"property":"article:author","content":"xbZhong"}],["meta",{"property":"article:modified_time","content":"2025-10-10T12:45:16.000Z"}]]},"git":{"createdTime":1760100316000,"updatedTime":1760100316000,"contributors":[{"name":"BO","username":"BO","email":"2396768163@qq.com","commits":1,"url":"https://github.com/BO"}]},"readingTime":{"minutes":5.22,"words":1566},"filePathRelative":"ds/平衡树基础.md","excerpt":"<h2>二叉排序树</h2>\\n<ul>\\n<li>对于任意的根节点\\n<ul>\\n<li>左子树的值 &lt; 根节点的值</li>\\n<li>右子树的值 &gt; 根节点的值</li>\\n</ul>\\n</li>\\n<li>类似中序遍历的遍历方式 ，因此用中序遍历遍历出来一定是有序的</li>\\n</ul>\\n<h3>插入</h3>\\n<p><strong>与根节点比较，判断要插入到左子树还是右子树</strong></p>\\n<h3>删除</h3>\\n<ol>\\n<li>删除叶子节点\\n<ul>\\n<li>直接删除，让父节点指针指向空地址</li>\\n</ul>\\n</li>\\n<li>删除出度为1的节点\\n<ul>\\n<li>出度为1的节点只有一个子节点</li>\\n<li>交换子节点和根节点的位置</li>\\n<li>删除根节点(此时根节点变成叶子节点)</li>\\n</ul>\\n</li>\\n<li>删除出度为2的节点\\n<ul>\\n<li>当前节点既有左子树又有右子树</li>\\n<li>当前节点的前驱(中序遍历)是左子树中的最大值,后继是右子树中的最小值</li>\\n<li>前驱是左子树中最右边的节点，因此一定没有右子树，同理，后继也一定没有左子树</li>\\n<li>用前驱和根节点交换，将问题转化为删除度为1的节点</li>\\n</ul>\\n</li>\\n</ol>","autoDesc":true}');export{z as comp,K as data};
